
FINAL_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004e6  00800060  00002fcc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000032b  00800546  00800546  00003546  2**0
                  ALLOC
  3 .stab         00003618  00000000  00000000  00003548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c16  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008776  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000088b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a66f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c308  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c6f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__vector_10>
      2c:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__vector_13>
      38:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__vector_14>
      3c:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	18 e0       	ldi	r17, 0x08	; 8
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e3       	ldi	r26, 0x38	; 56
     128:	b5 e0       	ldi	r27, 0x05	; 5
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e3       	ldi	r24, 0x38	; 56
     496:	95 e0       	ldi	r25, 0x05	; 5
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

#include <util/delay.h>
#define F_CPU 8000000UL

int main ()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
     b4e:	0e 94 8a 09 	call	0x1314	; 0x1314 <MDIO_voidInit>
	MUART_voidInit();
     b52:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <MUART_voidInit>
	MTIMER0_voidInit();
     b56:	0e 94 63 12 	call	0x24c6	; 0x24c6 <MTIMER0_voidInit>
	MGI_voidEnable();
     b5a:	0e 94 47 12 	call	0x248e	; 0x248e <MGI_voidEnable>
	TWI_voidInitMaster(0);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <TWI_voidInitMaster>
	H_voidHomePageLogOrReg();
     b66:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_voidHomePageLogOrReg>
     b6a:	ff cf       	rjmp	.-2      	; 0xb6a <main+0x24>

00000b6c <MDIO_voidSetPinDirection>:
#include "../Include/MCAL/DIO/DIO_Cfg.h"

//MDIO_voidSetPinDirection (DIO_PORTA, PIN5, DIO_OUTPUT);

void MDIO_voidSetPinDirection (DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_Direction)
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	2d 97       	sbiw	r28, 0x0d	; 13
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	6a 83       	std	Y+2, r22	; 0x02
     b84:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_Direction <= DIO_OUTPUT) )
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	84 30       	cpi	r24, 0x04	; 4
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <MDIO_voidSetPinDirection+0x22>
     b8c:	09 c1       	rjmp	.+530    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 30       	cpi	r24, 0x08	; 8
     b92:	08 f0       	brcs	.+2      	; 0xb96 <MDIO_voidSetPinDirection+0x2a>
     b94:	05 c1       	rjmp	.+522    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <MDIO_voidSetPinDirection+0x32>
     b9c:	01 c1       	rjmp	.+514    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_portID)
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	3d 87       	std	Y+13, r19	; 0x0d
     ba6:	2c 87       	std	Y+12, r18	; 0x0c
     ba8:	8c 85       	ldd	r24, Y+12	; 0x0c
     baa:	9d 85       	ldd	r25, Y+13	; 0x0d
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	91 05       	cpc	r25, r1
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <MDIO_voidSetPinDirection+0x48>
     bb2:	4f c0       	rjmp	.+158    	; 0xc52 <MDIO_voidSetPinDirection+0xe6>
     bb4:	2c 85       	ldd	r18, Y+12	; 0x0c
     bb6:	3d 85       	ldd	r19, Y+13	; 0x0d
     bb8:	22 30       	cpi	r18, 0x02	; 2
     bba:	31 05       	cpc	r19, r1
     bbc:	2c f4       	brge	.+10     	; 0xbc8 <MDIO_voidSetPinDirection+0x5c>
     bbe:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	71 f0       	breq	.+28     	; 0xbe2 <MDIO_voidSetPinDirection+0x76>
     bc6:	ec c0       	rjmp	.+472    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
     bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
     bca:	3d 85       	ldd	r19, Y+13	; 0x0d
     bcc:	22 30       	cpi	r18, 0x02	; 2
     bce:	31 05       	cpc	r19, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <MDIO_voidSetPinDirection+0x68>
     bd2:	77 c0       	rjmp	.+238    	; 0xcc2 <MDIO_voidSetPinDirection+0x156>
     bd4:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd6:	9d 85       	ldd	r25, Y+13	; 0x0d
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <MDIO_voidSetPinDirection+0x74>
     bde:	a9 c0       	rjmp	.+338    	; 0xd32 <MDIO_voidSetPinDirection+0x1c6>
     be0:	df c0       	rjmp	.+446    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_Direction)
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	3b 87       	std	Y+11, r19	; 0x0b
     bea:	2a 87       	std	Y+10, r18	; 0x0a
     bec:	8a 85       	ldd	r24, Y+10	; 0x0a
     bee:	9b 85       	ldd	r25, Y+11	; 0x0b
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	31 f0       	breq	.+12     	; 0xc00 <MDIO_voidSetPinDirection+0x94>
     bf4:	2a 85       	ldd	r18, Y+10	; 0x0a
     bf6:	3b 85       	ldd	r19, Y+11	; 0x0b
     bf8:	21 30       	cpi	r18, 0x01	; 1
     bfa:	31 05       	cpc	r19, r1
     bfc:	b1 f0       	breq	.+44     	; 0xc2a <MDIO_voidSetPinDirection+0xbe>
     bfe:	d0 c0       	rjmp	.+416    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
     c00:	aa e3       	ldi	r26, 0x3A	; 58
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	ea e3       	ldi	r30, 0x3A	; 58
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 2e       	mov	r0, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <MDIO_voidSetPinDirection+0xb2>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <MDIO_voidSetPinDirection+0xae>
     c22:	80 95       	com	r24
     c24:	84 23       	and	r24, r20
     c26:	8c 93       	st	X, r24
     c28:	bb c0       	rjmp	.+374    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
     c2a:	aa e3       	ldi	r26, 0x3A	; 58
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ea e3       	ldi	r30, 0x3A	; 58
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	48 2f       	mov	r20, r24
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <MDIO_voidSetPinDirection+0xdc>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <MDIO_voidSetPinDirection+0xd8>
     c4c:	84 2b       	or	r24, r20
     c4e:	8c 93       	st	X, r24
     c50:	a7 c0       	rjmp	.+334    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_Direction)
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	39 87       	std	Y+9, r19	; 0x09
     c5a:	28 87       	std	Y+8, r18	; 0x08
     c5c:	88 85       	ldd	r24, Y+8	; 0x08
     c5e:	99 85       	ldd	r25, Y+9	; 0x09
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	31 f0       	breq	.+12     	; 0xc70 <MDIO_voidSetPinDirection+0x104>
     c64:	28 85       	ldd	r18, Y+8	; 0x08
     c66:	39 85       	ldd	r19, Y+9	; 0x09
     c68:	21 30       	cpi	r18, 0x01	; 1
     c6a:	31 05       	cpc	r19, r1
     c6c:	b1 f0       	breq	.+44     	; 0xc9a <MDIO_voidSetPinDirection+0x12e>
     c6e:	98 c0       	rjmp	.+304    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
     c70:	a7 e3       	ldi	r26, 0x37	; 55
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e7 e3       	ldi	r30, 0x37	; 55
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 2e       	mov	r0, r18
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <MDIO_voidSetPinDirection+0x122>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <MDIO_voidSetPinDirection+0x11e>
     c92:	80 95       	com	r24
     c94:	84 23       	and	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	83 c0       	rjmp	.+262    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
     c9a:	a7 e3       	ldi	r26, 0x37	; 55
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <MDIO_voidSetPinDirection+0x14c>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <MDIO_voidSetPinDirection+0x148>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	6f c0       	rjmp	.+222    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_Direction)
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3f 83       	std	Y+7, r19	; 0x07
     cca:	2e 83       	std	Y+6, r18	; 0x06
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	31 f0       	breq	.+12     	; 0xce0 <MDIO_voidSetPinDirection+0x174>
     cd4:	2e 81       	ldd	r18, Y+6	; 0x06
     cd6:	3f 81       	ldd	r19, Y+7	; 0x07
     cd8:	21 30       	cpi	r18, 0x01	; 1
     cda:	31 05       	cpc	r19, r1
     cdc:	b1 f0       	breq	.+44     	; 0xd0a <MDIO_voidSetPinDirection+0x19e>
     cde:	60 c0       	rjmp	.+192    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
     ce0:	a4 e3       	ldi	r26, 0x34	; 52
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e4 e3       	ldi	r30, 0x34	; 52
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <MDIO_voidSetPinDirection+0x192>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <MDIO_voidSetPinDirection+0x18e>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	8c 93       	st	X, r24
     d08:	4b c0       	rjmp	.+150    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
     d0a:	a4 e3       	ldi	r26, 0x34	; 52
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e4 e3       	ldi	r30, 0x34	; 52
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <MDIO_voidSetPinDirection+0x1bc>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <MDIO_voidSetPinDirection+0x1b8>
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	37 c0       	rjmp	.+110    	; 0xda0 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_Direction)
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3d 83       	std	Y+5, r19	; 0x05
     d3a:	2c 83       	std	Y+4, r18	; 0x04
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	31 f0       	breq	.+12     	; 0xd50 <MDIO_voidSetPinDirection+0x1e4>
     d44:	2c 81       	ldd	r18, Y+4	; 0x04
     d46:	3d 81       	ldd	r19, Y+5	; 0x05
     d48:	21 30       	cpi	r18, 0x01	; 1
     d4a:	31 05       	cpc	r19, r1
     d4c:	b1 f0       	breq	.+44     	; 0xd7a <MDIO_voidSetPinDirection+0x20e>
     d4e:	28 c0       	rjmp	.+80     	; 0xda0 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
     d50:	a1 e3       	ldi	r26, 0x31	; 49
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e1 e3       	ldi	r30, 0x31	; 49
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <MDIO_voidSetPinDirection+0x202>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <MDIO_voidSetPinDirection+0x1fe>
     d72:	80 95       	com	r24
     d74:	84 23       	and	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	13 c0       	rjmp	.+38     	; 0xda0 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
     d7a:	a1 e3       	ldi	r26, 0x31	; 49
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e1 e3       	ldi	r30, 0x31	; 49
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <MDIO_voidSetPinDirection+0x22c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <MDIO_voidSetPinDirection+0x228>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     da0:	2d 96       	adiw	r28, 0x0d	; 13
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_Value)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	2d 97       	sbiw	r28, 0x0d	; 13
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	6a 83       	std	Y+2, r22	; 0x02
     dca:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_Value <= DIO_SET) )
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	84 30       	cpi	r24, 0x04	; 4
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <MDIO_voidSetPinValue+0x22>
     dd2:	09 c1       	rjmp	.+530    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	08 f0       	brcs	.+2      	; 0xddc <MDIO_voidSetPinValue+0x2a>
     dda:	05 c1       	rjmp	.+522    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	08 f0       	brcs	.+2      	; 0xde4 <MDIO_voidSetPinValue+0x32>
     de2:	01 c1       	rjmp	.+514    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
	{
		switch (A_portID)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3d 87       	std	Y+13, r19	; 0x0d
     dec:	2c 87       	std	Y+12, r18	; 0x0c
     dee:	8c 85       	ldd	r24, Y+12	; 0x0c
     df0:	9d 85       	ldd	r25, Y+13	; 0x0d
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	91 05       	cpc	r25, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <MDIO_voidSetPinValue+0x48>
     df8:	4f c0       	rjmp	.+158    	; 0xe98 <MDIO_voidSetPinValue+0xe6>
     dfa:	2c 85       	ldd	r18, Y+12	; 0x0c
     dfc:	3d 85       	ldd	r19, Y+13	; 0x0d
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	31 05       	cpc	r19, r1
     e02:	2c f4       	brge	.+10     	; 0xe0e <MDIO_voidSetPinValue+0x5c>
     e04:	8c 85       	ldd	r24, Y+12	; 0x0c
     e06:	9d 85       	ldd	r25, Y+13	; 0x0d
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	71 f0       	breq	.+28     	; 0xe28 <MDIO_voidSetPinValue+0x76>
     e0c:	ec c0       	rjmp	.+472    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
     e0e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e10:	3d 85       	ldd	r19, Y+13	; 0x0d
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <MDIO_voidSetPinValue+0x68>
     e18:	77 c0       	rjmp	.+238    	; 0xf08 <MDIO_voidSetPinValue+0x156>
     e1a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e1c:	9d 85       	ldd	r25, Y+13	; 0x0d
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	91 05       	cpc	r25, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <MDIO_voidSetPinValue+0x74>
     e24:	a9 c0       	rjmp	.+338    	; 0xf78 <MDIO_voidSetPinValue+0x1c6>
     e26:	df c0       	rjmp	.+446    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_Value)
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	3b 87       	std	Y+11, r19	; 0x0b
     e30:	2a 87       	std	Y+10, r18	; 0x0a
     e32:	8a 85       	ldd	r24, Y+10	; 0x0a
     e34:	9b 85       	ldd	r25, Y+11	; 0x0b
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	31 f0       	breq	.+12     	; 0xe46 <MDIO_voidSetPinValue+0x94>
     e3a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e3c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e3e:	21 30       	cpi	r18, 0x01	; 1
     e40:	31 05       	cpc	r19, r1
     e42:	b1 f0       	breq	.+44     	; 0xe70 <MDIO_voidSetPinValue+0xbe>
     e44:	d0 c0       	rjmp	.+416    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
     e46:	ab e3       	ldi	r26, 0x3B	; 59
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	eb e3       	ldi	r30, 0x3B	; 59
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <MDIO_voidSetPinValue+0xb2>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <MDIO_voidSetPinValue+0xae>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	bb c0       	rjmp	.+374    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
     e70:	ab e3       	ldi	r26, 0x3B	; 59
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	eb e3       	ldi	r30, 0x3B	; 59
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <MDIO_voidSetPinValue+0xdc>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <MDIO_voidSetPinValue+0xd8>
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	a7 c0       	rjmp	.+334    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_Value)
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	39 87       	std	Y+9, r19	; 0x09
     ea0:	28 87       	std	Y+8, r18	; 0x08
     ea2:	88 85       	ldd	r24, Y+8	; 0x08
     ea4:	99 85       	ldd	r25, Y+9	; 0x09
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <MDIO_voidSetPinValue+0x104>
     eaa:	28 85       	ldd	r18, Y+8	; 0x08
     eac:	39 85       	ldd	r19, Y+9	; 0x09
     eae:	21 30       	cpi	r18, 0x01	; 1
     eb0:	31 05       	cpc	r19, r1
     eb2:	b1 f0       	breq	.+44     	; 0xee0 <MDIO_voidSetPinValue+0x12e>
     eb4:	98 c0       	rjmp	.+304    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_pinID);
     eb6:	a8 e3       	ldi	r26, 0x38	; 56
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e8 e3       	ldi	r30, 0x38	; 56
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <MDIO_voidSetPinValue+0x122>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <MDIO_voidSetPinValue+0x11e>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	83 c0       	rjmp	.+262    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_pinID);
     ee0:	a8 e3       	ldi	r26, 0x38	; 56
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e8 e3       	ldi	r30, 0x38	; 56
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <MDIO_voidSetPinValue+0x14c>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <MDIO_voidSetPinValue+0x148>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	6f c0       	rjmp	.+222    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_Value)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3f 83       	std	Y+7, r19	; 0x07
     f10:	2e 83       	std	Y+6, r18	; 0x06
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	31 f0       	breq	.+12     	; 0xf26 <MDIO_voidSetPinValue+0x174>
     f1a:	2e 81       	ldd	r18, Y+6	; 0x06
     f1c:	3f 81       	ldd	r19, Y+7	; 0x07
     f1e:	21 30       	cpi	r18, 0x01	; 1
     f20:	31 05       	cpc	r19, r1
     f22:	b1 f0       	breq	.+44     	; 0xf50 <MDIO_voidSetPinValue+0x19e>
     f24:	60 c0       	rjmp	.+192    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_pinID);
     f26:	a5 e3       	ldi	r26, 0x35	; 53
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e3       	ldi	r30, 0x35	; 53
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <MDIO_voidSetPinValue+0x192>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <MDIO_voidSetPinValue+0x18e>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	4b c0       	rjmp	.+150    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_pinID);
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <MDIO_voidSetPinValue+0x1bc>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <MDIO_voidSetPinValue+0x1b8>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	37 c0       	rjmp	.+110    	; 0xfe6 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_Value)
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3d 83       	std	Y+5, r19	; 0x05
     f80:	2c 83       	std	Y+4, r18	; 0x04
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	31 f0       	breq	.+12     	; 0xf96 <MDIO_voidSetPinValue+0x1e4>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	21 30       	cpi	r18, 0x01	; 1
     f90:	31 05       	cpc	r19, r1
     f92:	b1 f0       	breq	.+44     	; 0xfc0 <MDIO_voidSetPinValue+0x20e>
     f94:	28 c0       	rjmp	.+80     	; 0xfe6 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_pinID);
     f96:	a2 e3       	ldi	r26, 0x32	; 50
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e3       	ldi	r30, 0x32	; 50
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <MDIO_voidSetPinValue+0x202>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <MDIO_voidSetPinValue+0x1fe>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	13 c0       	rjmp	.+38     	; 0xfe6 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_pinID);
     fc0:	a2 e3       	ldi	r26, 0x32	; 50
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e2 e3       	ldi	r30, 0x32	; 50
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <MDIO_voidSetPinValue+0x22c>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <MDIO_voidSetPinValue+0x228>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     fe6:	2d 96       	adiw	r28, 0x0d	; 13
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <MDIO_GetPinValue>:


DIO_VALUE_e MDIO_GetPinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <MDIO_GetPinValue+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <MDIO_GetPinValue+0x8>
    1000:	0f 92       	push	r0
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	8a 83       	std	Y+2, r24	; 0x02
    1008:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_Value;
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	84 30       	cpi	r24, 0x04	; 4
    100e:	08 f0       	brcs	.+2      	; 0x1012 <MDIO_GetPinValue+0x1a>
    1010:	6b c0       	rjmp	.+214    	; 0x10e8 <MDIO_GetPinValue+0xf0>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	88 30       	cpi	r24, 0x08	; 8
    1016:	08 f0       	brcs	.+2      	; 0x101a <MDIO_GetPinValue+0x22>
    1018:	67 c0       	rjmp	.+206    	; 0x10e8 <MDIO_GetPinValue+0xf0>
	{
		switch (A_portID)
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3d 83       	std	Y+5, r19	; 0x05
    1022:	2c 83       	std	Y+4, r18	; 0x04
    1024:	4c 81       	ldd	r20, Y+4	; 0x04
    1026:	5d 81       	ldd	r21, Y+5	; 0x05
    1028:	41 30       	cpi	r20, 0x01	; 1
    102a:	51 05       	cpc	r21, r1
    102c:	41 f1       	breq	.+80     	; 0x107e <MDIO_GetPinValue+0x86>
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	91 05       	cpc	r25, r1
    1036:	34 f4       	brge	.+12     	; 0x1044 <MDIO_GetPinValue+0x4c>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	21 15       	cp	r18, r1
    103e:	31 05       	cpc	r19, r1
    1040:	61 f0       	breq	.+24     	; 0x105a <MDIO_GetPinValue+0x62>
    1042:	52 c0       	rjmp	.+164    	; 0x10e8 <MDIO_GetPinValue+0xf0>
    1044:	4c 81       	ldd	r20, Y+4	; 0x04
    1046:	5d 81       	ldd	r21, Y+5	; 0x05
    1048:	42 30       	cpi	r20, 0x02	; 2
    104a:	51 05       	cpc	r21, r1
    104c:	51 f1       	breq	.+84     	; 0x10a2 <MDIO_GetPinValue+0xaa>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	b9 f1       	breq	.+110    	; 0x10c6 <MDIO_GetPinValue+0xce>
    1058:	47 c0       	rjmp	.+142    	; 0x10e8 <MDIO_GetPinValue+0xf0>
		{
		case DIO_PORTA:
			local_Value = GET_BIT(PINA_REG,A_pinID);
    105a:	e9 e3       	ldi	r30, 0x39	; 57
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a9 01       	movw	r20, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <MDIO_GetPinValue+0x7a>
    106e:	55 95       	asr	r21
    1070:	47 95       	ror	r20
    1072:	8a 95       	dec	r24
    1074:	e2 f7       	brpl	.-8      	; 0x106e <MDIO_GetPinValue+0x76>
    1076:	ca 01       	movw	r24, r20
    1078:	81 70       	andi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	35 c0       	rjmp	.+106    	; 0x10e8 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_Value = GET_BIT(PINB_REG,A_pinID);
    107e:	e6 e3       	ldi	r30, 0x36	; 54
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <MDIO_GetPinValue+0x9e>
    1092:	55 95       	asr	r21
    1094:	47 95       	ror	r20
    1096:	8a 95       	dec	r24
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <MDIO_GetPinValue+0x9a>
    109a:	ca 01       	movw	r24, r20
    109c:	81 70       	andi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	23 c0       	rjmp	.+70     	; 0x10e8 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_Value = GET_BIT(PINC_REG,A_pinID);
    10a2:	e3 e3       	ldi	r30, 0x33	; 51
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a9 01       	movw	r20, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <MDIO_GetPinValue+0xc2>
    10b6:	55 95       	asr	r21
    10b8:	47 95       	ror	r20
    10ba:	8a 95       	dec	r24
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <MDIO_GetPinValue+0xbe>
    10be:	ca 01       	movw	r24, r20
    10c0:	81 70       	andi	r24, 0x01	; 1
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	11 c0       	rjmp	.+34     	; 0x10e8 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_Value = GET_BIT(PIND_REG,A_pinID);
    10c6:	e0 e3       	ldi	r30, 0x30	; 48
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <MDIO_GetPinValue+0xe6>
    10da:	55 95       	asr	r21
    10dc:	47 95       	ror	r20
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <MDIO_GetPinValue+0xe2>
    10e2:	ca 01       	movw	r24, r20
    10e4:	81 70       	andi	r24, 0x01	; 1
    10e6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return local_Value;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <MDIO_voidTogglePinValue+0x6>
    1100:	00 d0       	rcall	.+0      	; 0x1102 <MDIO_voidTogglePinValue+0x8>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	08 f0       	brcs	.+2      	; 0x1112 <MDIO_voidTogglePinValue+0x18>
    1110:	72 c0       	rjmp	.+228    	; 0x11f6 <MDIO_voidTogglePinValue+0xfc>
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 30       	cpi	r24, 0x08	; 8
    1116:	08 f0       	brcs	.+2      	; 0x111a <MDIO_voidTogglePinValue+0x20>
    1118:	6e c0       	rjmp	.+220    	; 0x11f6 <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_portID)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3c 83       	std	Y+4, r19	; 0x04
    1122:	2b 83       	std	Y+3, r18	; 0x03
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	49 f1       	breq	.+82     	; 0x1180 <MDIO_voidTogglePinValue+0x86>
    112e:	2b 81       	ldd	r18, Y+3	; 0x03
    1130:	3c 81       	ldd	r19, Y+4	; 0x04
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <MDIO_voidTogglePinValue+0x48>
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <MDIO_voidTogglePinValue+0x5e>
    1140:	5a c0       	rjmp	.+180    	; 0x11f6 <MDIO_voidTogglePinValue+0xfc>
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	71 f1       	breq	.+92     	; 0x11a8 <MDIO_voidTogglePinValue+0xae>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	e9 f1       	breq	.+122    	; 0x11d0 <MDIO_voidTogglePinValue+0xd6>
    1156:	4f c0       	rjmp	.+158    	; 0x11f6 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    1158:	ab e3       	ldi	r26, 0x3B	; 59
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	eb e3       	ldi	r30, 0x3B	; 59
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <MDIO_voidTogglePinValue+0x7c>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <MDIO_voidTogglePinValue+0x78>
    117a:	84 27       	eor	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	3b c0       	rjmp	.+118    	; 0x11f6 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1180:	a8 e3       	ldi	r26, 0x38	; 56
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <MDIO_voidTogglePinValue+0xa4>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <MDIO_voidTogglePinValue+0xa0>
    11a2:	84 27       	eor	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	27 c0       	rjmp	.+78     	; 0x11f6 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    11a8:	a5 e3       	ldi	r26, 0x35	; 53
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e3       	ldi	r30, 0x35	; 53
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <MDIO_voidTogglePinValue+0xcc>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <MDIO_voidTogglePinValue+0xc8>
    11ca:	84 27       	eor	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	13 c0       	rjmp	.+38     	; 0x11f6 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    11d0:	a2 e3       	ldi	r26, 0x32	; 50
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e2 e3       	ldi	r30, 0x32	; 50
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <MDIO_voidTogglePinValue+0xf4>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <MDIO_voidTogglePinValue+0xf0>
    11f2:	84 27       	eor	r24, r20
    11f4:	8c 93       	st	X, r24
			break;
		}
	}
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (DIO_PORT_e A_portID, u8 A_u8Direction)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <MDIO_voidSetPortDirection+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <MDIO_voidSetPortDirection+0x8>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_portID <= DIO_PORTD) )
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	84 30       	cpi	r24, 0x04	; 4
    1218:	90 f5       	brcc	.+100    	; 0x127e <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_portID)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3c 83       	std	Y+4, r19	; 0x04
    1222:	2b 83       	std	Y+3, r18	; 0x03
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	d1 f0       	breq	.+52     	; 0x1262 <MDIO_voidSetPortDirection+0x5e>
    122e:	2b 81       	ldd	r18, Y+3	; 0x03
    1230:	3c 81       	ldd	r19, Y+4	; 0x04
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	2c f4       	brge	.+10     	; 0x1242 <MDIO_voidSetPortDirection+0x3e>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	61 f0       	breq	.+24     	; 0x1258 <MDIO_voidSetPortDirection+0x54>
    1240:	1e c0       	rjmp	.+60     	; 0x127e <MDIO_voidSetPortDirection+0x7a>
    1242:	2b 81       	ldd	r18, Y+3	; 0x03
    1244:	3c 81       	ldd	r19, Y+4	; 0x04
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	81 f0       	breq	.+32     	; 0x126c <MDIO_voidSetPortDirection+0x68>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	91 05       	cpc	r25, r1
    1254:	81 f0       	breq	.+32     	; 0x1276 <MDIO_voidSetPortDirection+0x72>
    1256:	13 c0       	rjmp	.+38     	; 0x127e <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8Direction;
    1258:	ea e3       	ldi	r30, 0x3A	; 58
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24
    1260:	0e c0       	rjmp	.+28     	; 0x127e <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8Direction;
    1262:	e7 e3       	ldi	r30, 0x37	; 55
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
    126a:	09 c0       	rjmp	.+18     	; 0x127e <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8Direction;
    126c:	e4 e3       	ldi	r30, 0x34	; 52
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
    1274:	04 c0       	rjmp	.+8      	; 0x127e <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8Direction;
    1276:	e1 e3       	ldi	r30, 0x31	; 49
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 83       	st	Z, r24
			break;
		}
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_portID, u8 A_u8Value)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <MDIO_voidSetPortValue+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <MDIO_voidSetPortValue+0x8>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_portID <= DIO_PORTD) )
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	90 f5       	brcc	.+100    	; 0x1306 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_portID)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3c 83       	std	Y+4, r19	; 0x04
    12aa:	2b 83       	std	Y+3, r18	; 0x03
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	d1 f0       	breq	.+52     	; 0x12ea <MDIO_voidSetPortValue+0x5e>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	2c f4       	brge	.+10     	; 0x12ca <MDIO_voidSetPortValue+0x3e>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <MDIO_voidSetPortValue+0x54>
    12c8:	1e c0       	rjmp	.+60     	; 0x1306 <MDIO_voidSetPortValue+0x7a>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	81 f0       	breq	.+32     	; 0x12f4 <MDIO_voidSetPortValue+0x68>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	81 f0       	breq	.+32     	; 0x12fe <MDIO_voidSetPortValue+0x72>
    12de:	13 c0       	rjmp	.+38     	; 0x1306 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8Value;
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	80 83       	st	Z, r24
    12e8:	0e c0       	rjmp	.+28     	; 0x1306 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8Value;
    12ea:	e8 e3       	ldi	r30, 0x38	; 56
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	80 83       	st	Z, r24
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8Value;
    12f4:	e5 e3       	ldi	r30, 0x35	; 53
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8Value;
    12fe:	e2 e3       	ldi	r30, 0x32	; 50
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
			break;
		}
	}
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <MDIO_voidInit>:


void MDIO_voidInit()
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    131c:	ea e3       	ldi	r30, 0x3A	; 58
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	87 e0       	ldi	r24, 0x07	; 7
    1322:	80 83       	st	Z, r24
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    1324:	e7 e3       	ldi	r30, 0x37	; 55
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	88 e0       	ldi	r24, 0x08	; 8
    132a:	80 83       	st	Z, r24
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    132c:	e4 e3       	ldi	r30, 0x34	; 52
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	10 82       	st	Z, r1
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    1332:	e1 e3       	ldi	r30, 0x31	; 49
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	80 83       	st	Z, r24
						PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION,
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1340:	e8 e3       	ldi	r30, 0x38	; 56
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	10 82       	st	Z, r1
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    1346:	e5 e3       	ldi	r30, 0x35	; 53
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    134c:	e2 e3       	ldi	r30, 0x32	; 50
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <MEEPROM_voidSendData>:
#include "../Include/MCAL/DIO/DIO_Interface.h"

#define F_CPU 8000000UL

void MEEPROM_voidSendData(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	62 97       	sbiw	r28, 0x12	; 18
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	99 8b       	std	Y+17, r25	; 0x11
    136e:	88 8b       	std	Y+16, r24	; 0x10
    1370:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    1372:	88 89       	ldd	r24, Y+16	; 0x10
    1374:	99 89       	ldd	r25, Y+17	; 0x11
    1376:	89 2f       	mov	r24, r25
    1378:	99 27       	eor	r25, r25
    137a:	80 65       	ori	r24, 0x50	; 80
    137c:	8f 87       	std	Y+15, r24	; 0x0f
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    137e:	0e 94 3f 14 	call	0x287e	; 0x287e <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    1382:	8f 85       	ldd	r24, Y+15	; 0x0f
    1384:	0e 94 8c 14 	call	0x2918	; 0x2918 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    1388:	88 89       	ldd	r24, Y+16	; 0x10
    138a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    138e:	8a 89       	ldd	r24, Y+18	; 0x12
    1390:	0e 94 ff 14 	call	0x29fe	; 0x29fe <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    1394:	0e 94 57 15 	call	0x2aae	; 0x2aae <TWI_voidSendStopCondition>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e2       	ldi	r26, 0x20	; 32
    139e:	b1 e4       	ldi	r27, 0x41	; 65
    13a0:	8b 87       	std	Y+11, r24	; 0x0b
    13a2:	9c 87       	std	Y+12, r25	; 0x0c
    13a4:	ad 87       	std	Y+13, r26	; 0x0d
    13a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	4a ef       	ldi	r20, 0xFA	; 250
    13b6:	54 e4       	ldi	r21, 0x44	; 68
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	98 87       	std	Y+8, r25	; 0x08
    13c4:	a9 87       	std	Y+9, r26	; 0x09
    13c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <MEEPROM_voidSendData+0x92>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	3f c0       	rjmp	.+126    	; 0x1468 <MEEPROM_voidSendData+0x110>
	else if (__tmp > 65535)
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	4c f5       	brge	.+82     	; 0x1454 <MEEPROM_voidSendData+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	6b 85       	ldd	r22, Y+11	; 0x0b
    1404:	7c 85       	ldd	r23, Y+12	; 0x0c
    1406:	8d 85       	ldd	r24, Y+13	; 0x0d
    1408:	9e 85       	ldd	r25, Y+14	; 0x0e
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	0f c0       	rjmp	.+30     	; 0x144a <MEEPROM_voidSendData+0xf2>
    142c:	88 ec       	ldi	r24, 0xC8	; 200
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 83       	std	Y+4, r25	; 0x04
    1432:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <MEEPROM_voidSendData+0xe0>
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	69 f7       	brne	.-38     	; 0x142c <MEEPROM_voidSendData+0xd4>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <MEEPROM_voidSendData+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <MEEPROM_voidSendData+0x11c>
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    147c:	62 96       	adiw	r28, 0x12	; 18
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <MEEPROM_u8ReceiveData>:

u8 MEEPROM_u8ReceiveData(u16 Copy_u16LocationAddress)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <MEEPROM_u8ReceiveData+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <MEEPROM_u8ReceiveData+0x8>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	89 2f       	mov	r24, r25
    14a4:	99 27       	eor	r25, r25
    14a6:	80 65       	ori	r24, 0x50	; 80
    14a8:	89 83       	std	Y+1, r24	; 0x01
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    14aa:	0e 94 3f 14 	call	0x287e	; 0x287e <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	0e 94 8c 14 	call	0x2918	; 0x2918 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	0e 94 ff 14 	call	0x29fe	; 0x29fe <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    14ba:	0e 94 69 14 	call	0x28d2	; 0x28d2 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	0e 94 c7 14 	call	0x298e	; 0x298e <TWI_ErrorStatusSendSlaveAddressWithReadACK>

	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithACK(&Local_u8Data);
    14c4:	ce 01       	movw	r24, r28
    14c6:	02 96       	adiw	r24, 0x02	; 2
    14c8:	0e 94 28 15 	call	0x2a50	; 0x2a50 <TWI_ErrorStatusMasterReadDataByteWithACK>

	/*send the stop condition*/
	TWI_voidSendStopCondition();
    14cc:	0e 94 57 15 	call	0x2aae	; 0x2aae <TWI_voidSendStopCondition>

	return Local_u8Data;
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <H_voidRegister>:
} Account;

u8 Global_AccountCounter = 0;
Account accounts[20];

void H_voidRegister() {
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	e5 97       	sbiw	r28, 0x35	; 53
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    if (Global_AccountCounter < 10)
    14f8:	80 91 46 05 	lds	r24, 0x0546
    14fc:	8a 30       	cpi	r24, 0x0A	; 10
    14fe:	08 f0       	brcs	.+2      	; 0x1502 <H_voidRegister+0x22>
    1500:	f5 c0       	rjmp	.+490    	; 0x16ec <H_voidRegister+0x20c>
    {
        Account newAccount;
        u8 spaceCounter = 0;
    1502:	1f 82       	std	Y+7, r1	; 0x07
        while (1)
        {
            spaceCounter = 0;
    1504:	1f 82       	std	Y+7, r1	; 0x07
            MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Username must not include spaces)\n(Note: Press # when you are done)\n");
    1506:	80 e6       	ldi	r24, 0x60	; 96
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
            UART_vClearBuffer();
    150e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
            UART_vClearBuffer();
    1512:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
            u8 usernameFound = 0;
    1516:	1e 82       	std	Y+6, r1	; 0x06

				for (u8 i = 0; i < 20; i++)
    1518:	1d 82       	std	Y+5, r1	; 0x05
    151a:	24 c0       	rjmp	.+72     	; 0x1564 <H_voidRegister+0x84>
				{
					newAccount.username[i] = MUART_u8ReadByteSyncBlocking();
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	08 2f       	mov	r16, r24
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1526:	28 2f       	mov	r18, r24
    1528:	ce 01       	movw	r24, r28
    152a:	08 96       	adiw	r24, 0x08	; 8
    152c:	fc 01       	movw	r30, r24
    152e:	e0 0f       	add	r30, r16
    1530:	f1 1f       	adc	r31, r17
    1532:	20 83       	st	Z, r18
					if (newAccount.username[i] == '#')
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	ce 01       	movw	r24, r28
    153c:	08 96       	adiw	r24, 0x08	; 8
    153e:	fc 01       	movw	r30, r24
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	80 81       	ld	r24, Z
    1546:	83 32       	cpi	r24, 0x23	; 35
    1548:	51 f4       	brne	.+20     	; 0x155e <H_voidRegister+0x7e>
					{
						newAccount.username[i] = '\0';
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	ce 01       	movw	r24, r28
    1552:	08 96       	adiw	r24, 0x08	; 8
    1554:	fc 01       	movw	r30, r24
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	10 82       	st	Z, r1
    155c:	06 c0       	rjmp	.+12     	; 0x156a <H_voidRegister+0x8a>
            MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Username must not include spaces)\n(Note: Press # when you are done)\n");
            UART_vClearBuffer();
            UART_vClearBuffer();
            u8 usernameFound = 0;

				for (u8 i = 0; i < 20; i++)
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	84 31       	cpi	r24, 0x14	; 20
    1568:	c8 f2       	brcs	.-78     	; 0x151c <H_voidRegister+0x3c>
					{
						newAccount.username[i] = '\0';
						break;
					}
				 }
				for (u8 i = 0; newAccount.username[i] != '\0'; i++)
    156a:	1c 82       	std	Y+4, r1	; 0x04
    156c:	11 c0       	rjmp	.+34     	; 0x1590 <H_voidRegister+0xb0>
				{
					if (newAccount.username[i] == ' ')
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	ce 01       	movw	r24, r28
    1576:	08 96       	adiw	r24, 0x08	; 8
    1578:	fc 01       	movw	r30, r24
    157a:	e2 0f       	add	r30, r18
    157c:	f3 1f       	adc	r31, r19
    157e:	80 81       	ld	r24, Z
    1580:	80 32       	cpi	r24, 0x20	; 32
    1582:	19 f4       	brne	.+6      	; 0x158a <H_voidRegister+0xaa>
					{
						spaceCounter++;
    1584:	8f 81       	ldd	r24, Y+7	; 0x07
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	8f 83       	std	Y+7, r24	; 0x07
					{
						newAccount.username[i] = '\0';
						break;
					}
				 }
				for (u8 i = 0; newAccount.username[i] != '\0'; i++)
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	8c 83       	std	Y+4, r24	; 0x04
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	ce 01       	movw	r24, r28
    1598:	08 96       	adiw	r24, 0x08	; 8
    159a:	fc 01       	movw	r30, r24
    159c:	e2 0f       	add	r30, r18
    159e:	f3 1f       	adc	r31, r19
    15a0:	80 81       	ld	r24, Z
    15a2:	88 23       	and	r24, r24
    15a4:	21 f7       	brne	.-56     	; 0x156e <H_voidRegister+0x8e>
					if (newAccount.username[i] == ' ')
					{
						spaceCounter++;
					}
				}
				if (spaceCounter == 0)
    15a6:	8f 81       	ldd	r24, Y+7	; 0x07
    15a8:	88 23       	and	r24, r24
    15aa:	09 f0       	breq	.+2      	; 0x15ae <H_voidRegister+0xce>
    15ac:	9a c0       	rjmp	.+308    	; 0x16e2 <H_voidRegister+0x202>
				{
					for (u8 i = 0; i < 10; i++)
    15ae:	1b 82       	std	Y+3, r1	; 0x03
    15b0:	20 c0       	rjmp	.+64     	; 0x15f2 <H_voidRegister+0x112>
						{
							if (strcmp(newAccount.username, accounts[i].username) == 0)
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	9c 01       	movw	r18, r24
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	22 0f       	add	r18, r18
    15cc:	33 1f       	adc	r19, r19
    15ce:	82 0f       	add	r24, r18
    15d0:	93 1f       	adc	r25, r19
    15d2:	9c 01       	movw	r18, r24
    15d4:	2f 5a       	subi	r18, 0xAF	; 175
    15d6:	3a 4f       	sbci	r19, 0xFA	; 250
    15d8:	ce 01       	movw	r24, r28
    15da:	08 96       	adiw	r24, 0x08	; 8
    15dc:	b9 01       	movw	r22, r18
    15de:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <strcmp>
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	19 f4       	brne	.+6      	; 0x15ec <H_voidRegister+0x10c>
							{
								usernameFound++;
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	8e 83       	std	Y+6, r24	; 0x06
						spaceCounter++;
					}
				}
				if (spaceCounter == 0)
				{
					for (u8 i = 0; i < 10; i++)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	8a 30       	cpi	r24, 0x0A	; 10
    15f6:	e8 f2       	brcs	.-70     	; 0x15b2 <H_voidRegister+0xd2>
							{
								usernameFound++;
							}
						}

					if(usernameFound!=0)
    15f8:	8e 81       	ldd	r24, Y+6	; 0x06
    15fa:	88 23       	and	r24, r24
    15fc:	29 f0       	breq	.+10     	; 0x1608 <H_voidRegister+0x128>
					{
						MUART_voidSendStringSyncNonBlocking("Username is already Taken\n");
    15fe:	81 ec       	ldi	r24, 0xC1	; 193
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    1606:	89 c0       	rjmp	.+274    	; 0x171a <H_voidRegister+0x23a>
						break;
					}
					else
					{
					MUART_voidSendStringSyncNonBlocking("\nEnter your Password\n(Note: Press # when you are done)\n");
    1608:	8c ed       	ldi	r24, 0xDC	; 220
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
					UART_vClearBuffer();
    1610:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
					UART_vClearBuffer();
    1614:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
					for (u8 i = 0; i < 20; i++)
    1618:	1a 82       	std	Y+2, r1	; 0x02
    161a:	24 c0       	rjmp	.+72     	; 0x1664 <H_voidRegister+0x184>
					{
						newAccount.password[i] = MUART_u8ReadByteSyncBlocking();
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	08 2f       	mov	r16, r24
    1620:	10 e0       	ldi	r17, 0x00	; 0
    1622:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1626:	28 2f       	mov	r18, r24
    1628:	ce 01       	movw	r24, r28
    162a:	4c 96       	adiw	r24, 0x1c	; 28
    162c:	fc 01       	movw	r30, r24
    162e:	e0 0f       	add	r30, r16
    1630:	f1 1f       	adc	r31, r17
    1632:	20 83       	st	Z, r18
						if (newAccount.password[i] == '#')
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	ce 01       	movw	r24, r28
    163c:	4c 96       	adiw	r24, 0x1c	; 28
    163e:	fc 01       	movw	r30, r24
    1640:	e2 0f       	add	r30, r18
    1642:	f3 1f       	adc	r31, r19
    1644:	80 81       	ld	r24, Z
    1646:	83 32       	cpi	r24, 0x23	; 35
    1648:	51 f4       	brne	.+20     	; 0x165e <H_voidRegister+0x17e>
						{
							newAccount.password[i] = '\0';
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	ce 01       	movw	r24, r28
    1652:	4c 96       	adiw	r24, 0x1c	; 28
    1654:	fc 01       	movw	r30, r24
    1656:	e2 0f       	add	r30, r18
    1658:	f3 1f       	adc	r31, r19
    165a:	10 82       	st	Z, r1
    165c:	06 c0       	rjmp	.+12     	; 0x166a <H_voidRegister+0x18a>
					else
					{
					MUART_voidSendStringSyncNonBlocking("\nEnter your Password\n(Note: Press # when you are done)\n");
					UART_vClearBuffer();
					UART_vClearBuffer();
					for (u8 i = 0; i < 20; i++)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	8a 83       	std	Y+2, r24	; 0x02
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	84 31       	cpi	r24, 0x14	; 20
    1668:	c8 f2       	brcs	.-78     	; 0x161c <H_voidRegister+0x13c>
						{
							newAccount.password[i] = '\0';
							break;
						}
					}
					accounts[Global_AccountCounter++] = newAccount;
    166a:	20 91 46 05 	lds	r18, 0x0546
    166e:	28 ab       	std	Y+48, r18	; 0x30
    1670:	e8 a9       	ldd	r30, Y+48	; 0x30
    1672:	8e 2f       	mov	r24, r30
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	9c 01       	movw	r18, r24
    1684:	22 0f       	add	r18, r18
    1686:	33 1f       	adc	r19, r19
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	82 0f       	add	r24, r18
    168e:	93 1f       	adc	r25, r19
    1690:	8f 5a       	subi	r24, 0xAF	; 175
    1692:	9a 4f       	sbci	r25, 0xFA	; 250
    1694:	9a ab       	std	Y+50, r25	; 0x32
    1696:	89 ab       	std	Y+49, r24	; 0x31
    1698:	ce 01       	movw	r24, r28
    169a:	08 96       	adiw	r24, 0x08	; 8
    169c:	9c ab       	std	Y+52, r25	; 0x34
    169e:	8b ab       	std	Y+51, r24	; 0x33
    16a0:	98 e2       	ldi	r25, 0x28	; 40
    16a2:	9d ab       	std	Y+53, r25	; 0x35
    16a4:	eb a9       	ldd	r30, Y+51	; 0x33
    16a6:	fc a9       	ldd	r31, Y+52	; 0x34
    16a8:	00 80       	ld	r0, Z
    16aa:	8b a9       	ldd	r24, Y+51	; 0x33
    16ac:	9c a9       	ldd	r25, Y+52	; 0x34
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	9c ab       	std	Y+52, r25	; 0x34
    16b2:	8b ab       	std	Y+51, r24	; 0x33
    16b4:	e9 a9       	ldd	r30, Y+49	; 0x31
    16b6:	fa a9       	ldd	r31, Y+50	; 0x32
    16b8:	00 82       	st	Z, r0
    16ba:	89 a9       	ldd	r24, Y+49	; 0x31
    16bc:	9a a9       	ldd	r25, Y+50	; 0x32
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	9a ab       	std	Y+50, r25	; 0x32
    16c2:	89 ab       	std	Y+49, r24	; 0x31
    16c4:	9d a9       	ldd	r25, Y+53	; 0x35
    16c6:	91 50       	subi	r25, 0x01	; 1
    16c8:	9d ab       	std	Y+53, r25	; 0x35
    16ca:	ed a9       	ldd	r30, Y+53	; 0x35
    16cc:	ee 23       	and	r30, r30
    16ce:	51 f7       	brne	.-44     	; 0x16a4 <H_voidRegister+0x1c4>
    16d0:	88 a9       	ldd	r24, Y+48	; 0x30
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 46 05 	sts	0x0546, r24
					MUART_voidSendStringSyncNonBlocking("Account Has been Registered Successfully\n");
    16d8:	84 e1       	ldi	r24, 0x14	; 20
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    16e0:	1c c0       	rjmp	.+56     	; 0x171a <H_voidRegister+0x23a>
					break;
					}
				}
				else
				{
					MUART_voidSendStringSyncNonBlocking("Username must not include spaces\nPlease Try Again\n");
    16e2:	8e e3       	ldi	r24, 0x3E	; 62
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    16ea:	0c cf       	rjmp	.-488    	; 0x1504 <H_voidRegister+0x24>
				}
        }
    }
    else
    {
        MUART_voidSendStringSyncNonBlocking("Maximum number of accounts (10) reached.\n");
    16ec:	81 e7       	ldi	r24, 0x71	; 113
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
        MUART_voidSendStringSyncNonBlocking("Would you like to replace an existing account? (Y/N)\n");
    16f4:	8b e9       	ldi	r24, 0x9B	; 155
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
        UART_vClearBuffer();
    16fc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
        UART_vClearBuffer();
    1700:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
        u8 choice = MUART_u8ReadByteSyncBlocking();
    1704:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1708:	89 83       	std	Y+1, r24	; 0x01
        if (choice == 'Y' || choice == 'y')
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	89 35       	cpi	r24, 0x59	; 89
    170e:	19 f0       	breq	.+6      	; 0x1716 <H_voidRegister+0x236>
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	89 37       	cpi	r24, 0x79	; 121
    1714:	11 f4       	brne	.+4      	; 0x171a <H_voidRegister+0x23a>
        {
            H_voidReplaceAccount();
    1716:	0e 94 9a 0b 	call	0x1734	; 0x1734 <H_voidReplaceAccount>
        }
    }
    H_voidHomePageLogOrReg();
    171a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_voidHomePageLogOrReg>
}
    171e:	e5 96       	adiw	r28, 0x35	; 53
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	08 95       	ret

00001734 <H_voidReplaceAccount>:

void H_voidReplaceAccount()
{
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	ca 54       	subi	r28, 0x4A	; 74
    1742:	d0 40       	sbci	r29, 0x00	; 0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    MUART_voidSendStringSyncNonBlocking("Enter the username of the account you want to replace:\n");
    174e:	81 ed       	ldi	r24, 0xD1	; 209
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    u8 usernameToReplace[20];
    UART_vClearBuffer();
    1756:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
    UART_vClearBuffer();
    175a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
    for (u8 i = 0; i < 20; i++)
    175e:	18 86       	std	Y+8, r1	; 0x08
    1760:	24 c0       	rjmp	.+72     	; 0x17aa <H_voidReplaceAccount+0x76>
    {
        usernameToReplace[i] = MUART_u8ReadByteSyncBlocking();
    1762:	88 85       	ldd	r24, Y+8	; 0x08
    1764:	08 2f       	mov	r16, r24
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    176c:	28 2f       	mov	r18, r24
    176e:	ce 01       	movw	r24, r28
    1770:	0a 96       	adiw	r24, 0x0a	; 10
    1772:	fc 01       	movw	r30, r24
    1774:	e0 0f       	add	r30, r16
    1776:	f1 1f       	adc	r31, r17
    1778:	20 83       	st	Z, r18
        if (usernameToReplace[i] == '#')
    177a:	88 85       	ldd	r24, Y+8	; 0x08
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	ce 01       	movw	r24, r28
    1782:	0a 96       	adiw	r24, 0x0a	; 10
    1784:	fc 01       	movw	r30, r24
    1786:	e2 0f       	add	r30, r18
    1788:	f3 1f       	adc	r31, r19
    178a:	80 81       	ld	r24, Z
    178c:	83 32       	cpi	r24, 0x23	; 35
    178e:	51 f4       	brne	.+20     	; 0x17a4 <H_voidReplaceAccount+0x70>
        {
            usernameToReplace[i] = '\0';
    1790:	88 85       	ldd	r24, Y+8	; 0x08
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	ce 01       	movw	r24, r28
    1798:	0a 96       	adiw	r24, 0x0a	; 10
    179a:	fc 01       	movw	r30, r24
    179c:	e2 0f       	add	r30, r18
    179e:	f3 1f       	adc	r31, r19
    17a0:	10 82       	st	Z, r1
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <H_voidReplaceAccount+0x7c>
{
    MUART_voidSendStringSyncNonBlocking("Enter the username of the account you want to replace:\n");
    u8 usernameToReplace[20];
    UART_vClearBuffer();
    UART_vClearBuffer();
    for (u8 i = 0; i < 20; i++)
    17a4:	88 85       	ldd	r24, Y+8	; 0x08
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	88 87       	std	Y+8, r24	; 0x08
    17aa:	88 85       	ldd	r24, Y+8	; 0x08
    17ac:	84 31       	cpi	r24, 0x14	; 20
    17ae:	c8 f2       	brcs	.-78     	; 0x1762 <H_voidReplaceAccount+0x2e>
            usernameToReplace[i] = '\0';
            break;
        }
     }

    u8 found = 0;
    17b0:	19 86       	std	Y+9, r1	; 0x09
    for (u8 i = 0; i < Global_AccountCounter; i++)
    17b2:	1f 82       	std	Y+7, r1	; 0x07
    17b4:	24 c1       	rjmp	.+584    	; 0x19fe <H_voidReplaceAccount+0x2ca>
    {
        if (strcmp(accounts[i].username, usernameToReplace) == 0)
    17b6:	8f 81       	ldd	r24, Y+7	; 0x07
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	9c 01       	movw	r18, r24
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	22 0f       	add	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	82 0f       	add	r24, r18
    17d4:	93 1f       	adc	r25, r19
    17d6:	8f 5a       	subi	r24, 0xAF	; 175
    17d8:	9a 4f       	sbci	r25, 0xFA	; 250
    17da:	9e 01       	movw	r18, r28
    17dc:	26 5f       	subi	r18, 0xF6	; 246
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	b9 01       	movw	r22, r18
    17e2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <strcmp>
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	09 f0       	breq	.+2      	; 0x17ec <H_voidReplaceAccount+0xb8>
    17ea:	06 c1       	rjmp	.+524    	; 0x19f8 <H_voidReplaceAccount+0x2c4>
        {
            found = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 87       	std	Y+9, r24	; 0x09
            u8 usernameFound = 0;
    17f0:	1e 82       	std	Y+6, r1	; 0x06
            u8 spaceCounter = 0;
    17f2:	1d 82       	std	Y+5, r1	; 0x05
            Account newAccount;
            MUART_voidSendStringSyncNonBlocking("Enter the new Username:\n");
    17f4:	89 e0       	ldi	r24, 0x09	; 9
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
            UART_vClearBuffer();
    17fc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
            UART_vClearBuffer();
    1800:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
            for (u8 j = 0; j < 20; j++)
    1804:	1c 82       	std	Y+4, r1	; 0x04
    1806:	24 c0       	rjmp	.+72     	; 0x1850 <H_voidReplaceAccount+0x11c>
            {
                newAccount.username[j] = MUART_u8ReadByteSyncBlocking();
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	08 2f       	mov	r16, r24
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1812:	28 2f       	mov	r18, r24
    1814:	ce 01       	movw	r24, r28
    1816:	4e 96       	adiw	r24, 0x1e	; 30
    1818:	fc 01       	movw	r30, r24
    181a:	e0 0f       	add	r30, r16
    181c:	f1 1f       	adc	r31, r17
    181e:	20 83       	st	Z, r18
                if (newAccount.username[j] == '#')
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	ce 01       	movw	r24, r28
    1828:	4e 96       	adiw	r24, 0x1e	; 30
    182a:	fc 01       	movw	r30, r24
    182c:	e2 0f       	add	r30, r18
    182e:	f3 1f       	adc	r31, r19
    1830:	80 81       	ld	r24, Z
    1832:	83 32       	cpi	r24, 0x23	; 35
    1834:	51 f4       	brne	.+20     	; 0x184a <H_voidReplaceAccount+0x116>
                {
                    newAccount.username[j] = '\0';
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	ce 01       	movw	r24, r28
    183e:	4e 96       	adiw	r24, 0x1e	; 30
    1840:	fc 01       	movw	r30, r24
    1842:	e2 0f       	add	r30, r18
    1844:	f3 1f       	adc	r31, r19
    1846:	10 82       	st	Z, r1
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <H_voidReplaceAccount+0x122>
            u8 spaceCounter = 0;
            Account newAccount;
            MUART_voidSendStringSyncNonBlocking("Enter the new Username:\n");
            UART_vClearBuffer();
            UART_vClearBuffer();
            for (u8 j = 0; j < 20; j++)
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	8c 83       	std	Y+4, r24	; 0x04
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	84 31       	cpi	r24, 0x14	; 20
    1854:	c8 f2       	brcs	.-78     	; 0x1808 <H_voidReplaceAccount+0xd4>
                {
                    newAccount.username[j] = '\0';
                    break;
                }
            }
            for (u8 i = 0; newAccount.username[i] != '\0'; i++)
    1856:	1b 82       	std	Y+3, r1	; 0x03
    1858:	11 c0       	rjmp	.+34     	; 0x187c <H_voidReplaceAccount+0x148>
			{
				if (newAccount.username[i] == ' ')
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	ce 01       	movw	r24, r28
    1862:	4e 96       	adiw	r24, 0x1e	; 30
    1864:	fc 01       	movw	r30, r24
    1866:	e2 0f       	add	r30, r18
    1868:	f3 1f       	adc	r31, r19
    186a:	80 81       	ld	r24, Z
    186c:	80 32       	cpi	r24, 0x20	; 32
    186e:	19 f4       	brne	.+6      	; 0x1876 <H_voidReplaceAccount+0x142>
				{
					spaceCounter++;
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	8f 5f       	subi	r24, 0xFF	; 255
    1874:	8d 83       	std	Y+5, r24	; 0x05
                {
                    newAccount.username[j] = '\0';
                    break;
                }
            }
            for (u8 i = 0; newAccount.username[i] != '\0'; i++)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	8b 83       	std	Y+3, r24	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	ce 01       	movw	r24, r28
    1884:	4e 96       	adiw	r24, 0x1e	; 30
    1886:	fc 01       	movw	r30, r24
    1888:	e2 0f       	add	r30, r18
    188a:	f3 1f       	adc	r31, r19
    188c:	80 81       	ld	r24, Z
    188e:	88 23       	and	r24, r24
    1890:	21 f7       	brne	.-56     	; 0x185a <H_voidReplaceAccount+0x126>
				if (newAccount.username[i] == ' ')
				{
					spaceCounter++;
				}
			}
			if (spaceCounter == 0)
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	88 23       	and	r24, r24
    1896:	09 f0       	breq	.+2      	; 0x189a <H_voidReplaceAccount+0x166>
    1898:	ab c0       	rjmp	.+342    	; 0x19f0 <H_voidReplaceAccount+0x2bc>
			{
				for (u8 i = 0; i < 10; i++)
    189a:	1a 82       	std	Y+2, r1	; 0x02
    189c:	20 c0       	rjmp	.+64     	; 0x18de <H_voidReplaceAccount+0x1aa>
					{
						if (strcmp(newAccount.username, accounts[i].username) == 0)
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	9c 01       	movw	r18, r24
    18b2:	22 0f       	add	r18, r18
    18b4:	33 1f       	adc	r19, r19
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	9c 01       	movw	r18, r24
    18c0:	2f 5a       	subi	r18, 0xAF	; 175
    18c2:	3a 4f       	sbci	r19, 0xFA	; 250
    18c4:	ce 01       	movw	r24, r28
    18c6:	4e 96       	adiw	r24, 0x1e	; 30
    18c8:	b9 01       	movw	r22, r18
    18ca:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <strcmp>
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	19 f4       	brne	.+6      	; 0x18d8 <H_voidReplaceAccount+0x1a4>
						{
							usernameFound++;
    18d2:	8e 81       	ldd	r24, Y+6	; 0x06
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	8e 83       	std	Y+6, r24	; 0x06
					spaceCounter++;
				}
			}
			if (spaceCounter == 0)
			{
				for (u8 i = 0; i < 10; i++)
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	8f 5f       	subi	r24, 0xFF	; 255
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	8a 30       	cpi	r24, 0x0A	; 10
    18e2:	e8 f2       	brcs	.-70     	; 0x189e <H_voidReplaceAccount+0x16a>
						{
							usernameFound++;
						}
					}

				if(usernameFound!=0)
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	88 23       	and	r24, r24
    18e8:	29 f0       	breq	.+10     	; 0x18f4 <H_voidReplaceAccount+0x1c0>
				{
					MUART_voidSendStringSyncNonBlocking("Username is already Taken\n");
    18ea:	81 ec       	ldi	r24, 0xC1	; 193
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    18f2:	8b c0       	rjmp	.+278    	; 0x1a0a <H_voidReplaceAccount+0x2d6>
					break;
				}
				else
				{
					MUART_voidSendStringSyncNonBlocking("\nEnter the new Password:\n");
    18f4:	82 e2       	ldi	r24, 0x22	; 34
    18f6:	92 e0       	ldi	r25, 0x02	; 2
    18f8:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
					UART_vClearBuffer();
    18fc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
					UART_vClearBuffer();
    1900:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
					for (u8 j = 0; j < 20; j++)
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	24 c0       	rjmp	.+72     	; 0x1950 <H_voidReplaceAccount+0x21c>
					{
						newAccount.password[j] = MUART_u8ReadByteSyncBlocking();
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	08 2f       	mov	r16, r24
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1912:	28 2f       	mov	r18, r24
    1914:	ce 01       	movw	r24, r28
    1916:	c2 96       	adiw	r24, 0x32	; 50
    1918:	fc 01       	movw	r30, r24
    191a:	e0 0f       	add	r30, r16
    191c:	f1 1f       	adc	r31, r17
    191e:	20 83       	st	Z, r18
						if (newAccount.password[j] == '#')
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	ce 01       	movw	r24, r28
    1928:	c2 96       	adiw	r24, 0x32	; 50
    192a:	fc 01       	movw	r30, r24
    192c:	e2 0f       	add	r30, r18
    192e:	f3 1f       	adc	r31, r19
    1930:	80 81       	ld	r24, Z
    1932:	83 32       	cpi	r24, 0x23	; 35
    1934:	51 f4       	brne	.+20     	; 0x194a <H_voidReplaceAccount+0x216>
						{
							newAccount.password[j] = '\0';
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	ce 01       	movw	r24, r28
    193e:	c2 96       	adiw	r24, 0x32	; 50
    1940:	fc 01       	movw	r30, r24
    1942:	e2 0f       	add	r30, r18
    1944:	f3 1f       	adc	r31, r19
    1946:	10 82       	st	Z, r1
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <H_voidReplaceAccount+0x222>
				else
				{
					MUART_voidSendStringSyncNonBlocking("\nEnter the new Password:\n");
					UART_vClearBuffer();
					UART_vClearBuffer();
					for (u8 j = 0; j < 20; j++)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	84 31       	cpi	r24, 0x14	; 20
    1954:	c8 f2       	brcs	.-78     	; 0x1908 <H_voidReplaceAccount+0x1d4>
						{
							newAccount.password[j] = '\0';
							break;
						}
					}
					accounts[i] = newAccount;
    1956:	8f 81       	ldd	r24, Y+7	; 0x07
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	9c 01       	movw	r18, r24
    196a:	22 0f       	add	r18, r18
    196c:	33 1f       	adc	r19, r19
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	82 0f       	add	r24, r18
    1974:	93 1f       	adc	r25, r19
    1976:	8f 5a       	subi	r24, 0xAF	; 175
    1978:	9a 4f       	sbci	r25, 0xFA	; 250
    197a:	28 96       	adiw	r28, 0x08	; 8
    197c:	9f af       	std	Y+63, r25	; 0x3f
    197e:	8e af       	std	Y+62, r24	; 0x3e
    1980:	28 97       	sbiw	r28, 0x08	; 8
    1982:	ce 01       	movw	r24, r28
    1984:	4e 96       	adiw	r24, 0x1e	; 30
    1986:	2a 96       	adiw	r28, 0x0a	; 10
    1988:	9f af       	std	Y+63, r25	; 0x3f
    198a:	8e af       	std	Y+62, r24	; 0x3e
    198c:	2a 97       	sbiw	r28, 0x0a	; 10
    198e:	98 e2       	ldi	r25, 0x28	; 40
    1990:	2b 96       	adiw	r28, 0x0b	; 11
    1992:	9f af       	std	Y+63, r25	; 0x3f
    1994:	2b 97       	sbiw	r28, 0x0b	; 11
    1996:	2a 96       	adiw	r28, 0x0a	; 10
    1998:	ee ad       	ldd	r30, Y+62	; 0x3e
    199a:	ff ad       	ldd	r31, Y+63	; 0x3f
    199c:	2a 97       	sbiw	r28, 0x0a	; 10
    199e:	00 80       	ld	r0, Z
    19a0:	2a 96       	adiw	r28, 0x0a	; 10
    19a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    19a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    19a6:	2a 97       	sbiw	r28, 0x0a	; 10
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	2a 96       	adiw	r28, 0x0a	; 10
    19ac:	9f af       	std	Y+63, r25	; 0x3f
    19ae:	8e af       	std	Y+62, r24	; 0x3e
    19b0:	2a 97       	sbiw	r28, 0x0a	; 10
    19b2:	28 96       	adiw	r28, 0x08	; 8
    19b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    19b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b8:	28 97       	sbiw	r28, 0x08	; 8
    19ba:	00 82       	st	Z, r0
    19bc:	28 96       	adiw	r28, 0x08	; 8
    19be:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19c2:	28 97       	sbiw	r28, 0x08	; 8
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	28 96       	adiw	r28, 0x08	; 8
    19c8:	9f af       	std	Y+63, r25	; 0x3f
    19ca:	8e af       	std	Y+62, r24	; 0x3e
    19cc:	28 97       	sbiw	r28, 0x08	; 8
    19ce:	2b 96       	adiw	r28, 0x0b	; 11
    19d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19d2:	2b 97       	sbiw	r28, 0x0b	; 11
    19d4:	91 50       	subi	r25, 0x01	; 1
    19d6:	2b 96       	adiw	r28, 0x0b	; 11
    19d8:	9f af       	std	Y+63, r25	; 0x3f
    19da:	2b 97       	sbiw	r28, 0x0b	; 11
    19dc:	2b 96       	adiw	r28, 0x0b	; 11
    19de:	ef ad       	ldd	r30, Y+63	; 0x3f
    19e0:	2b 97       	sbiw	r28, 0x0b	; 11
    19e2:	ee 23       	and	r30, r30
    19e4:	c1 f6       	brne	.-80     	; 0x1996 <H_voidReplaceAccount+0x262>
					MUART_voidSendStringSyncNonBlocking("Account has been replaced successfully.\n");
    19e6:	8c e3       	ldi	r24, 0x3C	; 60
    19e8:	92 e0       	ldi	r25, 0x02	; 2
    19ea:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    19ee:	0d c0       	rjmp	.+26     	; 0x1a0a <H_voidReplaceAccount+0x2d6>
					break;
				}
			}
			else
			{
				MUART_voidSendStringSyncNonBlocking("Username must not include spaces\n");
    19f0:	85 e6       	ldi	r24, 0x65	; 101
    19f2:	92 e0       	ldi	r25, 0x02	; 2
    19f4:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
            break;
        }
     }

    u8 found = 0;
    for (u8 i = 0; i < Global_AccountCounter; i++)
    19f8:	8f 81       	ldd	r24, Y+7	; 0x07
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	8f 83       	std	Y+7, r24	; 0x07
    19fe:	90 91 46 05 	lds	r25, 0x0546
    1a02:	8f 81       	ldd	r24, Y+7	; 0x07
    1a04:	89 17       	cp	r24, r25
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <H_voidReplaceAccount+0x2d6>
    1a08:	d6 ce       	rjmp	.-596    	; 0x17b6 <H_voidReplaceAccount+0x82>
			{
				MUART_voidSendStringSyncNonBlocking("Username must not include spaces\n");
			}
        }
    }
    if (!found)
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	88 23       	and	r24, r24
    1a0e:	21 f4       	brne	.+8      	; 0x1a18 <H_voidReplaceAccount+0x2e4>
    {
        MUART_voidSendStringSyncNonBlocking("Account not found.\n");
    1a10:	87 e8       	ldi	r24, 0x87	; 135
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    }
    H_voidHomePageLogOrReg();
    1a18:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_voidHomePageLogOrReg>
}
    1a1c:	c6 5b       	subi	r28, 0xB6	; 182
    1a1e:	df 4f       	sbci	r29, 0xFF	; 255
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <H_voidLogIn>:

void H_voidLogIn()
{
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	ae 97       	sbiw	r28, 0x2e	; 46
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    u8 localu8FirstChoice;
    Account loggedInAccount;
    u8 usernameFound = 0;
    1a4c:	1d 82       	std	Y+5, r1	; 0x05
    MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Press # when you are done)\n");
    1a4e:	8b e9       	ldi	r24, 0x9B	; 155
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    UART_vClearBuffer();
    1a56:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
    UART_vClearBuffer();
    1a5a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
    for (u8 i = 0; i < 20; i++)
    1a5e:	1c 82       	std	Y+4, r1	; 0x04
    1a60:	24 c0       	rjmp	.+72     	; 0x1aaa <H_voidLogIn+0x76>
    {
        loggedInAccount.username[i] = MUART_u8ReadByteSyncBlocking();
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	08 2f       	mov	r16, r24
    1a66:	10 e0       	ldi	r17, 0x00	; 0
    1a68:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	ce 01       	movw	r24, r28
    1a70:	07 96       	adiw	r24, 0x07	; 7
    1a72:	fc 01       	movw	r30, r24
    1a74:	e0 0f       	add	r30, r16
    1a76:	f1 1f       	adc	r31, r17
    1a78:	20 83       	st	Z, r18
        if (loggedInAccount.username[i] == '#')
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	ce 01       	movw	r24, r28
    1a82:	07 96       	adiw	r24, 0x07	; 7
    1a84:	fc 01       	movw	r30, r24
    1a86:	e2 0f       	add	r30, r18
    1a88:	f3 1f       	adc	r31, r19
    1a8a:	80 81       	ld	r24, Z
    1a8c:	83 32       	cpi	r24, 0x23	; 35
    1a8e:	51 f4       	brne	.+20     	; 0x1aa4 <H_voidLogIn+0x70>
        {
            loggedInAccount.username[i] = '\0';
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	ce 01       	movw	r24, r28
    1a98:	07 96       	adiw	r24, 0x07	; 7
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e2 0f       	add	r30, r18
    1a9e:	f3 1f       	adc	r31, r19
    1aa0:	10 82       	st	Z, r1
    1aa2:	06 c0       	rjmp	.+12     	; 0x1ab0 <H_voidLogIn+0x7c>
    Account loggedInAccount;
    u8 usernameFound = 0;
    MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Press # when you are done)\n");
    UART_vClearBuffer();
    UART_vClearBuffer();
    for (u8 i = 0; i < 20; i++)
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	8c 83       	std	Y+4, r24	; 0x04
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	84 31       	cpi	r24, 0x14	; 20
    1aae:	c8 f2       	brcs	.-78     	; 0x1a62 <H_voidLogIn+0x2e>
        {
            loggedInAccount.username[i] = '\0';
            break;
        }
     }
    for (u8 i = 0; i < Global_AccountCounter; i++)
    1ab0:	1b 82       	std	Y+3, r1	; 0x03
    1ab2:	9d c0       	rjmp	.+314    	; 0x1bee <H_voidLogIn+0x1ba>
    {
        if (strcmp(loggedInAccount.username, accounts[i].username) == 0)
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	82 0f       	add	r24, r18
    1ad2:	93 1f       	adc	r25, r19
    1ad4:	9c 01       	movw	r18, r24
    1ad6:	2f 5a       	subi	r18, 0xAF	; 175
    1ad8:	3a 4f       	sbci	r19, 0xFA	; 250
    1ada:	ce 01       	movw	r24, r28
    1adc:	07 96       	adiw	r24, 0x07	; 7
    1ade:	b9 01       	movw	r22, r18
    1ae0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <strcmp>
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <H_voidLogIn+0xb6>
    1ae8:	7f c0       	rjmp	.+254    	; 0x1be8 <H_voidLogIn+0x1b4>
        {
            usernameFound = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	8d 83       	std	Y+5, r24	; 0x05
            u8 attempts = 0;
    1aee:	1a 82       	std	Y+2, r1	; 0x02
    1af0:	6b c0       	rjmp	.+214    	; 0x1bc8 <H_voidLogIn+0x194>
            while (attempts < 3)
            {
                MUART_voidSendStringSyncNonBlocking("\nEnter your Password:\n(Note: Press # when you are done)\n");
    1af2:	83 ed       	ldi	r24, 0xD3	; 211
    1af4:	92 e0       	ldi	r25, 0x02	; 2
    1af6:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
                UART_vClearBuffer();
    1afa:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
                UART_vClearBuffer();
    1afe:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
                for (u8 j = 0; j < 20; j++)
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	24 c0       	rjmp	.+72     	; 0x1b4e <H_voidLogIn+0x11a>
                {
                    loggedInAccount.password[j] = MUART_u8ReadByteSyncBlocking();
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	08 2f       	mov	r16, r24
    1b0a:	10 e0       	ldi	r17, 0x00	; 0
    1b0c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1b10:	28 2f       	mov	r18, r24
    1b12:	ce 01       	movw	r24, r28
    1b14:	4b 96       	adiw	r24, 0x1b	; 27
    1b16:	fc 01       	movw	r30, r24
    1b18:	e0 0f       	add	r30, r16
    1b1a:	f1 1f       	adc	r31, r17
    1b1c:	20 83       	st	Z, r18
                    if (loggedInAccount.password[j] == '#')
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	ce 01       	movw	r24, r28
    1b26:	4b 96       	adiw	r24, 0x1b	; 27
    1b28:	fc 01       	movw	r30, r24
    1b2a:	e2 0f       	add	r30, r18
    1b2c:	f3 1f       	adc	r31, r19
    1b2e:	80 81       	ld	r24, Z
    1b30:	83 32       	cpi	r24, 0x23	; 35
    1b32:	51 f4       	brne	.+20     	; 0x1b48 <H_voidLogIn+0x114>
                    {
                        loggedInAccount.password[j] = '\0';
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	4b 96       	adiw	r24, 0x1b	; 27
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e2 0f       	add	r30, r18
    1b42:	f3 1f       	adc	r31, r19
    1b44:	10 82       	st	Z, r1
    1b46:	06 c0       	rjmp	.+12     	; 0x1b54 <H_voidLogIn+0x120>
            while (attempts < 3)
            {
                MUART_voidSendStringSyncNonBlocking("\nEnter your Password:\n(Note: Press # when you are done)\n");
                UART_vClearBuffer();
                UART_vClearBuffer();
                for (u8 j = 0; j < 20; j++)
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	8f 5f       	subi	r24, 0xFF	; 255
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	84 31       	cpi	r24, 0x14	; 20
    1b52:	c8 f2       	brcs	.-78     	; 0x1b06 <H_voidLogIn+0xd2>
                    {
                        loggedInAccount.password[j] = '\0';
                        break;
                    }
                }
                if (strcmp(loggedInAccount.password, accounts[i].password) == 0)
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	9c 01       	movw	r18, r24
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	82 0f       	add	r24, r18
    1b72:	93 1f       	adc	r25, r19
    1b74:	44 96       	adiw	r24, 0x14	; 20
    1b76:	9c 01       	movw	r18, r24
    1b78:	2f 5a       	subi	r18, 0xAF	; 175
    1b7a:	3a 4f       	sbci	r19, 0xFA	; 250
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	07 96       	adiw	r24, 0x07	; 7
    1b80:	44 96       	adiw	r24, 0x14	; 20
    1b82:	b9 01       	movw	r22, r18
    1b84:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <strcmp>
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	b9 f4       	brne	.+46     	; 0x1bba <H_voidLogIn+0x186>
                {
                    MUART_voidSendStringSyncNonBlocking("1.Home Page\n2.Replace Account\n");
    1b8c:	8c e0       	ldi	r24, 0x0C	; 12
    1b8e:	93 e0       	ldi	r25, 0x03	; 3
    1b90:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
                    UART_vClearBuffer();
    1b94:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
                    UART_vClearBuffer();
    1b98:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
                    localu8FirstChoice = MUART_u8ReadByteSyncBlocking();
    1b9c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1ba0:	8e 83       	std	Y+6, r24	; 0x06
                    if (localu8FirstChoice == '1')
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	81 33       	cpi	r24, 0x31	; 49
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <H_voidLogIn+0x17a>
                    {
                        H_voidHomePageAfterLogIn();
    1ba8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <H_voidHomePageAfterLogIn>
    1bac:	11 c0       	rjmp	.+34     	; 0x1bd0 <H_voidLogIn+0x19c>
                    }
                    else if (localu8FirstChoice == '2')
    1bae:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb0:	82 33       	cpi	r24, 0x32	; 50
    1bb2:	71 f4       	brne	.+28     	; 0x1bd0 <H_voidLogIn+0x19c>
                    {
                        H_voidReplaceAccount();
    1bb4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <H_voidReplaceAccount>
    1bb8:	0b c0       	rjmp	.+22     	; 0x1bd0 <H_voidLogIn+0x19c>
                    }
                    break;
                }
                else
                {
                    attempts++;
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
                    MUART_voidSendStringSyncNonBlocking("Incorrect Password. Please try again.\n");
    1bc0:	8b e2       	ldi	r24, 0x2B	; 43
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    {
        if (strcmp(loggedInAccount.username, accounts[i].username) == 0)
        {
            usernameFound = 1;
            u8 attempts = 0;
            while (attempts < 3)
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	08 f4       	brcc	.+2      	; 0x1bd0 <H_voidLogIn+0x19c>
    1bce:	91 cf       	rjmp	.-222    	; 0x1af2 <H_voidLogIn+0xbe>
                {
                    attempts++;
                    MUART_voidSendStringSyncNonBlocking("Incorrect Password. Please try again.\n");
                }
            }
            if (attempts == 3)
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 f4       	brne	.+36     	; 0x1bfa <H_voidLogIn+0x1c6>
            {
                MUART_voidSendStringSyncNonBlocking("Maximum attempts reached. Please try again later.\n");
    1bd6:	82 e5       	ldi	r24, 0x52	; 82
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>

                H_voidGenerateSirenSound();
    1bde:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <H_voidGenerateSirenSound>
                H_voidHomePageLogOrReg();
    1be2:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_voidHomePageLogOrReg>
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <H_voidLogIn+0x1c6>
        {
            loggedInAccount.username[i] = '\0';
            break;
        }
     }
    for (u8 i = 0; i < Global_AccountCounter; i++)
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	8f 5f       	subi	r24, 0xFF	; 255
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	90 91 46 05 	lds	r25, 0x0546
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	89 17       	cp	r24, r25
    1bf6:	08 f4       	brcc	.+2      	; 0x1bfa <H_voidLogIn+0x1c6>
    1bf8:	5d cf       	rjmp	.-326    	; 0x1ab4 <H_voidLogIn+0x80>

            }
            break;
        }
    }
    if (!usernameFound)
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	88 23       	and	r24, r24
    1bfe:	31 f4       	brne	.+12     	; 0x1c0c <H_voidLogIn+0x1d8>
    {
        MUART_voidSendStringSyncNonBlocking("Username not found. Please try again.\n");
    1c00:	85 e8       	ldi	r24, 0x85	; 133
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
        H_voidHomePageLogOrReg();
    1c08:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_voidHomePageLogOrReg>
    }
}
    1c0c:	ae 96       	adiw	r28, 0x2e	; 46
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <H_voidGenerateSirenSound>:

void H_voidGenerateSirenSound()
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	a2 97       	sbiw	r28, 0x22	; 34
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i < 3; i++)
    1c36:	1a a2       	std	Y+34, r1	; 0x22
    1c38:	19 a2       	std	Y+33, r1	; 0x21
    1c3a:	0c c1       	rjmp	.+536    	; 0x1e54 <H_voidGenerateSirenSound+0x232>
    {
    	for (u16 i=0 ; i<255 ;i+=10)
    1c3c:	18 a2       	std	Y+32, r1	; 0x20
    1c3e:	1f 8e       	std	Y+31, r1	; 0x1f
    1c40:	7a c0       	rjmp	.+244    	; 0x1d36 <H_voidGenerateSirenSound+0x114>
    	{
		MTIMER0_voidSetOCR0Value(i);
    1c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c44:	0e 94 97 12 	call	0x252e	; 0x252e <MTIMER0_voidSetOCR0Value>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a8 e4       	ldi	r26, 0x48	; 72
    1c4e:	b3 e4       	ldi	r27, 0x43	; 67
    1c50:	89 8f       	std	Y+25, r24	; 0x19
    1c52:	9a 8f       	std	Y+26, r25	; 0x1a
    1c54:	ab 8f       	std	Y+27, r26	; 0x1b
    1c56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	69 8d       	ldd	r22, Y+25	; 0x19
    1c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a ef       	ldi	r20, 0xFA	; 250
    1c66:	54 e4       	ldi	r21, 0x44	; 68
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	8d 8b       	std	Y+21, r24	; 0x15
    1c72:	9e 8b       	std	Y+22, r25	; 0x16
    1c74:	af 8b       	std	Y+23, r26	; 0x17
    1c76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <H_voidGenerateSirenSound+0x78>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9c 8b       	std	Y+20, r25	; 0x14
    1c96:	8b 8b       	std	Y+19, r24	; 0x13
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <H_voidGenerateSirenSound+0xf6>
	else if (__tmp > 65535)
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <H_voidGenerateSirenSound+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9c 8b       	std	Y+20, r25	; 0x14
    1cd8:	8b 8b       	std	Y+19, r24	; 0x13
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <H_voidGenerateSirenSound+0xd8>
    1cdc:	88 ec       	ldi	r24, 0xC8	; 200
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9a 8b       	std	Y+18, r25	; 0x12
    1ce2:	89 8b       	std	Y+17, r24	; 0x11
    1ce4:	89 89       	ldd	r24, Y+17	; 0x11
    1ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <H_voidGenerateSirenSound+0xc6>
    1cec:	9a 8b       	std	Y+18, r25	; 0x12
    1cee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <H_voidGenerateSirenSound+0xba>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <H_voidGenerateSirenSound+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	6d 89       	ldd	r22, Y+21	; 0x15
    1d06:	7e 89       	ldd	r23, Y+22	; 0x16
    1d08:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9c 8b       	std	Y+20, r25	; 0x14
    1d16:	8b 8b       	std	Y+19, r24	; 0x13
    1d18:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1c:	98 8b       	std	Y+16, r25	; 0x10
    1d1e:	8f 87       	std	Y+15, r24	; 0x0f
    1d20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d22:	98 89       	ldd	r25, Y+16	; 0x10
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <H_voidGenerateSirenSound+0x102>
    1d28:	98 8b       	std	Y+16, r25	; 0x10
    1d2a:	8f 87       	std	Y+15, r24	; 0x0f

void H_voidGenerateSirenSound()
{
    for (int i = 0; i < 3; i++)
    {
    	for (u16 i=0 ; i<255 ;i+=10)
    1d2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d30:	0a 96       	adiw	r24, 0x0a	; 10
    1d32:	98 a3       	std	Y+32, r25	; 0x20
    1d34:	8f 8f       	std	Y+31, r24	; 0x1f
    1d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d38:	98 a1       	ldd	r25, Y+32	; 0x20
    1d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	08 f4       	brcc	.+2      	; 0x1d42 <H_voidGenerateSirenSound+0x120>
    1d40:	80 cf       	rjmp	.-256    	; 0x1c42 <H_voidGenerateSirenSound+0x20>
    	{
		MTIMER0_voidSetOCR0Value(i);
		_delay_ms(200);
    	}
        for (int j = 255; j >= 0; j-=10)
    1d42:	8f ef       	ldi	r24, 0xFF	; 255
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9e 8f       	std	Y+30, r25	; 0x1e
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4a:	7a c0       	rjmp	.+244    	; 0x1e40 <H_voidGenerateSirenSound+0x21e>
        {
            MTIMER0_voidSetOCR0Value(j);
    1d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4e:	0e 94 97 12 	call	0x252e	; 0x252e <MTIMER0_voidSetOCR0Value>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a8 e4       	ldi	r26, 0x48	; 72
    1d58:	b3 e4       	ldi	r27, 0x43	; 67
    1d5a:	8b 87       	std	Y+11, r24	; 0x0b
    1d5c:	9c 87       	std	Y+12, r25	; 0x0c
    1d5e:	ad 87       	std	Y+13, r26	; 0x0d
    1d60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a ef       	ldi	r20, 0xFA	; 250
    1d70:	54 e4       	ldi	r21, 0x44	; 68
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8f 83       	std	Y+7, r24	; 0x07
    1d7c:	98 87       	std	Y+8, r25	; 0x08
    1d7e:	a9 87       	std	Y+9, r26	; 0x09
    1d80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <H_voidGenerateSirenSound+0x182>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <H_voidGenerateSirenSound+0x200>
	else if (__tmp > 65535)
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	89 85       	ldd	r24, Y+9	; 0x09
    1daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <H_voidGenerateSirenSound+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <H_voidGenerateSirenSound+0x1e2>
    1de6:	88 ec       	ldi	r24, 0xC8	; 200
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <H_voidGenerateSirenSound+0x1d0>
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <H_voidGenerateSirenSound+0x1c4>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <H_voidGenerateSirenSound+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <H_voidGenerateSirenSound+0x20c>
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    	for (u16 i=0 ; i<255 ;i+=10)
    	{
		MTIMER0_voidSetOCR0Value(i);
		_delay_ms(200);
    	}
        for (int j = 255; j >= 0; j-=10)
    1e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3a:	0a 97       	sbiw	r24, 0x0a	; 10
    1e3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e44:	99 23       	and	r25, r25
    1e46:	0c f0       	brlt	.+2      	; 0x1e4a <H_voidGenerateSirenSound+0x228>
    1e48:	81 cf       	rjmp	.-254    	; 0x1d4c <H_voidGenerateSirenSound+0x12a>
    }
}

void H_voidGenerateSirenSound()
{
    for (int i = 0; i < 3; i++)
    1e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	9a a3       	std	Y+34, r25	; 0x22
    1e52:	89 a3       	std	Y+33, r24	; 0x21
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	0c f4       	brge	.+2      	; 0x1e60 <H_voidGenerateSirenSound+0x23e>
    1e5e:	ee ce       	rjmp	.-548    	; 0x1c3c <H_voidGenerateSirenSound+0x1a>
        {
            MTIMER0_voidSetOCR0Value(j);
            _delay_ms(200);
        }
    }
    MTIMER0_voidSetOCR0Value(0);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	0e 94 97 12 	call	0x252e	; 0x252e <MTIMER0_voidSetOCR0Value>
}
    1e66:	a2 96       	adiw	r28, 0x22	; 34
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <H_voidHomePageLogOrReg>:

void H_voidHomePageLogOrReg()
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	u8 localu8FirstChoise=0;
    1e82:	19 82       	std	Y+1, r1	; 0x01
	MUART_voidSendStringSyncNonBlocking("\nHello in your Home\n");
    1e84:	8c ea       	ldi	r24, 0xAC	; 172
    1e86:	93 e0       	ldi	r25, 0x03	; 3
    1e88:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("\n1-log in\n2-Register\n");
    1e8c:	81 ec       	ldi	r24, 0xC1	; 193
    1e8e:	93 e0       	ldi	r25, 0x03	; 3
    1e90:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	UART_vClearBuffer();
    1e94:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
	UART_vClearBuffer();
    1e98:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
	localu8FirstChoise=MUART_u8ReadByteSyncBlocking();
    1e9c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1ea0:	89 83       	std	Y+1, r24	; 0x01

	if (localu8FirstChoise=='1')
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	81 33       	cpi	r24, 0x31	; 49
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <H_voidHomePageLogOrReg+0x36>
	{
		H_voidLogIn();
    1ea8:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <H_voidLogIn>
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <H_voidHomePageLogOrReg+0x40>
	}
	else if (localu8FirstChoise=='2')
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	82 33       	cpi	r24, 0x32	; 50
    1eb2:	11 f4       	brne	.+4      	; 0x1eb8 <H_voidHomePageLogOrReg+0x40>
	{
		H_voidRegister();
    1eb4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <H_voidRegister>
	}

}
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <H_voidHomePageAfterLogIn>:

void H_voidHomePageAfterLogIn()
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <H_voidHomePageAfterLogIn+0x6>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8choice=0;
    1eca:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8Option=0;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
	MUART_voidSendStringSyncNonBlocking("HELLO IN YOUR HOME\n");
    1ece:	87 ed       	ldi	r24, 0xD7	; 215
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("1-OPEN THE DOOR\n");
    1ed6:	8b ee       	ldi	r24, 0xEB	; 235
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("2-CLOSE THE DOOR\n");
    1ede:	8c ef       	ldi	r24, 0xFC	; 252
    1ee0:	93 e0       	ldi	r25, 0x03	; 3
    1ee2:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("3-LED ON\n");
    1ee6:	8e e0       	ldi	r24, 0x0E	; 14
    1ee8:	94 e0       	ldi	r25, 0x04	; 4
    1eea:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("4-LED OFF\n");
    1eee:	88 e1       	ldi	r24, 0x18	; 24
    1ef0:	94 e0       	ldi	r25, 0x04	; 4
    1ef2:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("5-Log Out\n");
    1ef6:	83 e2       	ldi	r24, 0x23	; 35
    1ef8:	94 e0       	ldi	r25, 0x04	; 4
    1efa:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	UART_vClearBuffer();
    1efe:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
	UART_vClearBuffer();
    1f02:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <UART_vClearBuffer>
	local_u8Option=MUART_u8ReadByteSyncBlocking();
    1f06:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <MUART_u8ReadByteSyncBlocking>
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	if (local_u8Option=='1')
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	81 33       	cpi	r24, 0x31	; 49
    1f10:	29 f4       	brne	.+10     	; 0x1f1c <H_voidHomePageAfterLogIn+0x5c>
	{
		H_voidOpeningDoor();
    1f12:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <H_voidOpeningDoor>
		H_voidHomePageAfterLogIn();
    1f16:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <H_voidHomePageAfterLogIn>
    1f1a:	24 c0       	rjmp	.+72     	; 0x1f64 <H_voidHomePageAfterLogIn+0xa4>
	}
	else if (local_u8Option=='2')
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	82 33       	cpi	r24, 0x32	; 50
    1f20:	29 f4       	brne	.+10     	; 0x1f2c <H_voidHomePageAfterLogIn+0x6c>
	{
		H_voidClosingDoor();
    1f22:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <H_voidClosingDoor>
		H_voidHomePageAfterLogIn();
    1f26:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <H_voidHomePageAfterLogIn>
    1f2a:	1c c0       	rjmp	.+56     	; 0x1f64 <H_voidHomePageAfterLogIn+0xa4>
	}
	else if (local_u8Option=='3')
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	83 33       	cpi	r24, 0x33	; 51
    1f30:	29 f4       	brne	.+10     	; 0x1f3c <H_voidHomePageAfterLogIn+0x7c>
	{
		H_voidLedOn();
    1f32:	0e 94 ff 10 	call	0x21fe	; 0x21fe <H_voidLedOn>
		H_voidHomePageAfterLogIn();
    1f36:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <H_voidHomePageAfterLogIn>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <H_voidHomePageAfterLogIn+0xa4>

	}
	else if (local_u8Option=='4')
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	84 33       	cpi	r24, 0x34	; 52
    1f40:	29 f4       	brne	.+10     	; 0x1f4c <H_voidHomePageAfterLogIn+0x8c>
	{
		H_voidLedOff();
    1f42:	0e 94 a3 11 	call	0x2346	; 0x2346 <H_voidLedOff>
		H_voidHomePageAfterLogIn();
    1f46:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <H_voidHomePageAfterLogIn>
    1f4a:	0c c0       	rjmp	.+24     	; 0x1f64 <H_voidHomePageAfterLogIn+0xa4>
	}
	else if (local_u8Option == '5')
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	85 33       	cpi	r24, 0x35	; 53
    1f50:	19 f4       	brne	.+6      	; 0x1f58 <H_voidHomePageAfterLogIn+0x98>
	{
		H_voidHomePageLogOrReg();
    1f52:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_voidHomePageLogOrReg>
    1f56:	06 c0       	rjmp	.+12     	; 0x1f64 <H_voidHomePageAfterLogIn+0xa4>
	}
	else
	{
		MUART_voidSendStringSyncNonBlocking("\nPlease Enter Valid Option\n");
    1f58:	8e e2       	ldi	r24, 0x2E	; 46
    1f5a:	94 e0       	ldi	r25, 0x04	; 4
    1f5c:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
		H_voidHomePageAfterLogIn();
    1f60:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <H_voidHomePageAfterLogIn>
	}

}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <H_voidOpeningDoor>:

void H_voidOpeningDoor()
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	2f 97       	sbiw	r28, 0x0f	; 15
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    1f82:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(MOTOR_PORT,MOTOR_PIN);
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	0e 94 fc 07 	call	0xff8	; 0xff8 <MDIO_GetPinValue>
    1f8c:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_SET)
    1f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	29 f4       	brne	.+10     	; 0x1f9e <H_voidOpeningDoor+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("DOOR IS ALREADY OPENED\n");
    1f94:	8a e4       	ldi	r24, 0x4A	; 74
    1f96:	94 e0       	ldi	r25, 0x04	; 4
    1f98:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    1f9c:	83 c0       	rjmp	.+262    	; 0x20a4 <H_voidOpeningDoor+0x136>
	}
	else
	{
	MUART_voidSendStringSyncNonBlocking("DOOR IS OPENENIG NOW\n\n");
    1f9e:	82 e6       	ldi	r24, 0x62	; 98
    1fa0:	94 e0       	ldi	r25, 0x04	; 4
    1fa2:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MDIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN,DIO_SET);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <MDIO_voidSetPinValue>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	aa e7       	ldi	r26, 0x7A	; 122
    1fb6:	b4 e4       	ldi	r27, 0x44	; 68
    1fb8:	8b 87       	std	Y+11, r24	; 0x0b
    1fba:	9c 87       	std	Y+12, r25	; 0x0c
    1fbc:	ad 87       	std	Y+13, r26	; 0x0d
    1fbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a ef       	ldi	r20, 0xFA	; 250
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8f 83       	std	Y+7, r24	; 0x07
    1fda:	98 87       	std	Y+8, r25	; 0x08
    1fdc:	a9 87       	std	Y+9, r26	; 0x09
    1fde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <H_voidOpeningDoor+0x94>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <H_voidOpeningDoor+0x112>
	else if (__tmp > 65535)
    2002:	6f 81       	ldd	r22, Y+7	; 0x07
    2004:	78 85       	ldd	r23, Y+8	; 0x08
    2006:	89 85       	ldd	r24, Y+9	; 0x09
    2008:	9a 85       	ldd	r25, Y+10	; 0x0a
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <H_voidOpeningDoor+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	6b 85       	ldd	r22, Y+11	; 0x0b
    201c:	7c 85       	ldd	r23, Y+12	; 0x0c
    201e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2020:	9e 85       	ldd	r25, Y+14	; 0x0e
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9e 83       	std	Y+6, r25	; 0x06
    2040:	8d 83       	std	Y+5, r24	; 0x05
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <H_voidOpeningDoor+0xf4>
    2044:	88 ec       	ldi	r24, 0xC8	; 200
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <H_voidOpeningDoor+0xe2>
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
    205a:	9e 81       	ldd	r25, Y+6	; 0x06
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <H_voidOpeningDoor+0xd6>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <H_voidOpeningDoor+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6f 81       	ldd	r22, Y+7	; 0x07
    206e:	78 85       	ldd	r23, Y+8	; 0x08
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	9a 81       	ldd	r25, Y+2	; 0x02
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <H_voidOpeningDoor+0x11e>
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	MUART_voidSendStringSyncNonBlocking("DOOR OPENED\n\n");
    2094:	89 e7       	ldi	r24, 0x79	; 121
    2096:	94 e0       	ldi	r25, 0x04	; 4
    2098:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    209c:	87 e8       	ldi	r24, 0x87	; 135
    209e:	94 e0       	ldi	r25, 0x04	; 4
    20a0:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	}
}
    20a4:	2f 96       	adiw	r28, 0x0f	; 15
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <H_voidClosingDoor>:

void H_voidClosingDoor()
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	2f 97       	sbiw	r28, 0x0f	; 15
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    20ca:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(MOTOR_PORT,MOTOR_PIN);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 fc 07 	call	0xff8	; 0xff8 <MDIO_GetPinValue>
    20d4:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_RESET)
    20d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d8:	88 23       	and	r24, r24
    20da:	29 f4       	brne	.+10     	; 0x20e6 <H_voidClosingDoor+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("DOOR IS ALREADY CLOSED\n");
    20dc:	80 ea       	ldi	r24, 0xA0	; 160
    20de:	94 e0       	ldi	r25, 0x04	; 4
    20e0:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    20e4:	83 c0       	rjmp	.+262    	; 0x21ec <H_voidClosingDoor+0x136>
	}
	else
	{
	MUART_voidSendStringSyncNonBlocking("DOOR IS CLOSING NOW\n\n");
    20e6:	88 eb       	ldi	r24, 0xB8	; 184
    20e8:	94 e0       	ldi	r25, 0x04	; 4
    20ea:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MDIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN,DIO_RESET);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <MDIO_voidSetPinValue>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	aa e7       	ldi	r26, 0x7A	; 122
    20fe:	b4 e4       	ldi	r27, 0x44	; 68
    2100:	8b 87       	std	Y+11, r24	; 0x0b
    2102:	9c 87       	std	Y+12, r25	; 0x0c
    2104:	ad 87       	std	Y+13, r26	; 0x0d
    2106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6b 85       	ldd	r22, Y+11	; 0x0b
    210a:	7c 85       	ldd	r23, Y+12	; 0x0c
    210c:	8d 85       	ldd	r24, Y+13	; 0x0d
    210e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8f 83       	std	Y+7, r24	; 0x07
    2122:	98 87       	std	Y+8, r25	; 0x08
    2124:	a9 87       	std	Y+9, r26	; 0x09
    2126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <H_voidClosingDoor+0x94>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <H_voidClosingDoor+0x112>
	else if (__tmp > 65535)
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <H_voidClosingDoor+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6b 85       	ldd	r22, Y+11	; 0x0b
    2164:	7c 85       	ldd	r23, Y+12	; 0x0c
    2166:	8d 85       	ldd	r24, Y+13	; 0x0d
    2168:	9e 85       	ldd	r25, Y+14	; 0x0e
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <H_voidClosingDoor+0xf4>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <H_voidClosingDoor+0xe2>
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <H_voidClosingDoor+0xd6>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <H_voidClosingDoor+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <H_voidClosingDoor+0x11e>
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	MUART_voidSendStringSyncNonBlocking("DOOR CLOSED\n\n");
    21dc:	8e ec       	ldi	r24, 0xCE	; 206
    21de:	94 e0       	ldi	r25, 0x04	; 4
    21e0:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    21e4:	87 e8       	ldi	r24, 0x87	; 135
    21e6:	94 e0       	ldi	r25, 0x04	; 4
    21e8:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	}
}
    21ec:	2f 96       	adiw	r28, 0x0f	; 15
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <H_voidLedOn>:

void H_voidLedOn()
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	2f 97       	sbiw	r28, 0x0f	; 15
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    2212:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(LED_PORT,LED_PIN);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	0e 94 fc 07 	call	0xff8	; 0xff8 <MDIO_GetPinValue>
    221c:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_SET)
    221e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	29 f4       	brne	.+10     	; 0x222e <H_voidLedOn+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("LED IS ALREADY ON\n\n");
    2224:	8c ed       	ldi	r24, 0xDC	; 220
    2226:	94 e0       	ldi	r25, 0x04	; 4
    2228:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    222c:	83 c0       	rjmp	.+262    	; 0x2334 <H_voidLedOn+0x136>
	}
	else
	{
	MUART_voidSendStringSyncNonBlocking("LED IS ON NOW\n\n");
    222e:	80 ef       	ldi	r24, 0xF0	; 240
    2230:	94 e0       	ldi	r25, 0x04	; 4
    2232:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MDIO_voidSetPinValue(LED_PORT,LED_PIN,DIO_SET);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <MDIO_voidSetPinValue>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	aa e7       	ldi	r26, 0x7A	; 122
    2246:	b4 e4       	ldi	r27, 0x44	; 68
    2248:	8b 87       	std	Y+11, r24	; 0x0b
    224a:	9c 87       	std	Y+12, r25	; 0x0c
    224c:	ad 87       	std	Y+13, r26	; 0x0d
    224e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2250:	6b 85       	ldd	r22, Y+11	; 0x0b
    2252:	7c 85       	ldd	r23, Y+12	; 0x0c
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4a ef       	ldi	r20, 0xFA	; 250
    225e:	54 e4       	ldi	r21, 0x44	; 68
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	8f 83       	std	Y+7, r24	; 0x07
    226a:	98 87       	std	Y+8, r25	; 0x08
    226c:	a9 87       	std	Y+9, r26	; 0x09
    226e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2284:	88 23       	and	r24, r24
    2286:	2c f4       	brge	.+10     	; 0x2292 <H_voidLedOn+0x94>
		__ticks = 1;
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	3f c0       	rjmp	.+126    	; 0x2310 <H_voidLedOn+0x112>
	else if (__tmp > 65535)
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	3f ef       	ldi	r19, 0xFF	; 255
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	57 e4       	ldi	r21, 0x47	; 71
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	4c f5       	brge	.+82     	; 0x22fc <H_voidLedOn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e2       	ldi	r20, 0x20	; 32
    22b8:	51 e4       	ldi	r21, 0x41	; 65
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	0f c0       	rjmp	.+30     	; 0x22f2 <H_voidLedOn+0xf4>
    22d4:	88 ec       	ldi	r24, 0xC8	; 200
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9c 83       	std	Y+4, r25	; 0x04
    22da:	8b 83       	std	Y+3, r24	; 0x03
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <H_voidLedOn+0xe2>
    22e4:	9c 83       	std	Y+4, r25	; 0x04
    22e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	69 f7       	brne	.-38     	; 0x22d4 <H_voidLedOn+0xd6>
    22fa:	14 c0       	rjmp	.+40     	; 0x2324 <H_voidLedOn+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <H_voidLedOn+0x11e>
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	MUART_voidSendStringSyncNonBlocking("LED ON\n\n");
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	95 e0       	ldi	r25, 0x05	; 5
    2328:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    232c:	87 e8       	ldi	r24, 0x87	; 135
    232e:	94 e0       	ldi	r25, 0x04	; 4
    2330:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	}
}
    2334:	2f 96       	adiw	r28, 0x0f	; 15
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <H_voidLedOff>:

void H_voidLedOff()
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	2f 97       	sbiw	r28, 0x0f	; 15
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    235a:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(LED_PORT,LED_PIN);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	0e 94 fc 07 	call	0xff8	; 0xff8 <MDIO_GetPinValue>
    2364:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_RESET)
    2366:	8f 85       	ldd	r24, Y+15	; 0x0f
    2368:	88 23       	and	r24, r24
    236a:	29 f4       	brne	.+10     	; 0x2376 <H_voidLedOff+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("LED IS ALREADY OFF\n");
    236c:	89 e0       	ldi	r24, 0x09	; 9
    236e:	95 e0       	ldi	r25, 0x05	; 5
    2370:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
    2374:	83 c0       	rjmp	.+262    	; 0x247c <H_voidLedOff+0x136>
	}
	else
	{
		MUART_voidSendStringSyncNonBlocking("LED IS OFF NOW\n\n");
    2376:	8d e1       	ldi	r24, 0x1D	; 29
    2378:	95 e0       	ldi	r25, 0x05	; 5
    237a:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
		MDIO_voidSetPinValue(LED_PORT,LED_PIN,DIO_RESET);
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	61 e0       	ldi	r22, 0x01	; 1
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <MDIO_voidSetPinValue>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	aa e7       	ldi	r26, 0x7A	; 122
    238e:	b4 e4       	ldi	r27, 0x44	; 68
    2390:	8b 87       	std	Y+11, r24	; 0x0b
    2392:	9c 87       	std	Y+12, r25	; 0x0c
    2394:	ad 87       	std	Y+13, r26	; 0x0d
    2396:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	6b 85       	ldd	r22, Y+11	; 0x0b
    239a:	7c 85       	ldd	r23, Y+12	; 0x0c
    239c:	8d 85       	ldd	r24, Y+13	; 0x0d
    239e:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a ef       	ldi	r20, 0xFA	; 250
    23a6:	54 e4       	ldi	r21, 0x44	; 68
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8f 83       	std	Y+7, r24	; 0x07
    23b2:	98 87       	std	Y+8, r25	; 0x08
    23b4:	a9 87       	std	Y+9, r26	; 0x09
    23b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <H_voidLedOff+0x94>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <H_voidLedOff+0x112>
	else if (__tmp > 65535)
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <H_voidLedOff+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	0f c0       	rjmp	.+30     	; 0x243a <H_voidLedOff+0xf4>
    241c:	88 ec       	ldi	r24, 0xC8	; 200
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	8b 83       	std	Y+3, r24	; 0x03
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <H_voidLedOff+0xe2>
    242c:	9c 83       	std	Y+4, r25	; 0x04
    242e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <H_voidLedOff+0xd6>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <H_voidLedOff+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <H_voidLedOff+0x11e>
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		MUART_voidSendStringSyncNonBlocking("LED OFF\n\n");
    246c:	8e e2       	ldi	r24, 0x2E	; 46
    246e:	95 e0       	ldi	r25, 0x05	; 5
    2470:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
		MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    2474:	87 e8       	ldi	r24, 0x87	; 135
    2476:	94 e0       	ldi	r25, 0x04	; 4
    2478:	0e 94 56 16 	call	0x2cac	; 0x2cac <MUART_voidSendStringSyncNonBlocking>
	}
}
    247c:	2f 96       	adiw	r28, 0x0f	; 15
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    2496:	af e5       	ldi	r26, 0x5F	; 95
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	ef e5       	ldi	r30, 0x5F	; 95
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	80 68       	ori	r24, 0x80	; 128
    24a2:	8c 93       	st	X, r24
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    24b2:	af e5       	ldi	r26, 0x5F	; 95
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	ef e5       	ldi	r30, 0x5F	; 95
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	8f 77       	andi	r24, 0x7F	; 127
    24be:	8c 93       	st	X, r24
}
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <MTIMER0_voidInit>:

void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;

void MTIMER0_voidInit (void)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
		TCCR0 &= 0b11001000;
		TCCR0 |= (TIMER0_CLK|(CTC_0C0_MODE<<4)) ;

	#elif TIMER0_MODE == FAST_PWM_MODE
		// Set Wave Generation Mode to FAST PWM Mode
		SET_BIT(TCCR0,3);
    24ce:	a3 e5       	ldi	r26, 0x53	; 83
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e3 e5       	ldi	r30, 0x53	; 83
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	88 60       	ori	r24, 0x08	; 8
    24da:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    24dc:	a3 e5       	ldi	r26, 0x53	; 83
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e3 e5       	ldi	r30, 0x53	; 83
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 64       	ori	r24, 0x40	; 64
    24e8:	8c 93       	st	X, r24

		// DISAPLE Interrupts
		CLR_BIT(TIMSK,1);
    24ea:	a9 e5       	ldi	r26, 0x59	; 89
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e9 e5       	ldi	r30, 0x59	; 89
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8d 7f       	andi	r24, 0xFD	; 253
    24f6:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,0);
    24f8:	a9 e5       	ldi	r26, 0x59	; 89
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e9 e5       	ldi	r30, 0x59	; 89
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8e 7f       	andi	r24, 0xFE	; 254
    2504:	8c 93       	st	X, r24

		//Set OCR0 VALUE
		OCR0 = OCR0_VALUE;
    2506:	ec e5       	ldi	r30, 0x5C	; 92
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	10 82       	st	Z, r1

		// SET OC0 and Start Timer by setting its clock
		TCCR0 &= TIEMR0_CLK_OC0_MASK ;
    250c:	a3 e5       	ldi	r26, 0x53	; 83
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e3 e5       	ldi	r30, 0x53	; 83
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	88 7c       	andi	r24, 0xC8	; 200
    2518:	8c 93       	st	X, r24
		TCCR0 |= (TIMER0_CLK|(FAST_PWM_OC0_MODE<<4)) ;
    251a:	a3 e5       	ldi	r26, 0x53	; 83
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e3 e5       	ldi	r30, 0x53	; 83
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	82 62       	ori	r24, 0x22	; 34
    2526:	8c 93       	st	X, r24

	#endif
}
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value(u8 A_u8NoOfTicks)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	0f 92       	push	r0
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	89 83       	std	Y+1, r24	; 0x01
	OCR0=A_u8NoOfTicks;
    253a:	ec e5       	ldi	r30, 0x5C	; 92
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	80 83       	st	Z, r24
}
    2542:	0f 90       	pop	r0
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <MTIMER0_voidSetPreloadValue>:

void MTIMER0_voidSetPreloadValue (u8 A_u8NoOfTicks)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8NoOfTicks;
    2556:	e2 e5       	ldi	r30, 0x52	; 82
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	80 83       	st	Z, r24
}
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <MTIMER0_voidStopTimer>:

void MTIMER0_voidStopTimer (void)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
    256e:	a3 e5       	ldi	r26, 0x53	; 83
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e3 e5       	ldi	r30, 0x53	; 83
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	88 7f       	andi	r24, 0xF8	; 248
    257a:	8c 93       	st	X, r24
}
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <MTIMER0_voidSetOVFCallback>:

void MTIMER0_voidSetOVFCallback (void (*A_PtrToFunc)(void))
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <MTIMER0_voidSetOVFCallback+0x6>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	31 f0       	breq	.+12     	; 0x25a4 <MTIMER0_voidSetOVFCallback+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	90 93 48 05 	sts	0x0548, r25
    25a0:	80 93 47 05 	sts	0x0547, r24
	}
}
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <MTIMER0_voidSetCTCCallback>:

void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <MTIMER0_voidSetCTCCallback+0x6>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	31 f0       	breq	.+12     	; 0x25d0 <MTIMER0_voidSetCTCCallback+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	90 93 4a 05 	sts	0x054A, r25
    25cc:	80 93 49 05 	sts	0x0549, r24
	}
}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    25da:	1f 92       	push	r1
    25dc:	0f 92       	push	r0
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	0f 92       	push	r0
    25e2:	11 24       	eor	r1, r1
    25e4:	2f 93       	push	r18
    25e6:	3f 93       	push	r19
    25e8:	4f 93       	push	r20
    25ea:	5f 93       	push	r21
    25ec:	6f 93       	push	r22
    25ee:	7f 93       	push	r23
    25f0:	8f 93       	push	r24
    25f2:	9f 93       	push	r25
    25f4:	af 93       	push	r26
    25f6:	bf 93       	push	r27
    25f8:	ef 93       	push	r30
    25fa:	ff 93       	push	r31
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    2604:	80 91 47 05 	lds	r24, 0x0547
    2608:	90 91 48 05 	lds	r25, 0x0548
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	29 f0       	breq	.+10     	; 0x261a <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    2610:	e0 91 47 05 	lds	r30, 0x0547
    2614:	f0 91 48 05 	lds	r31, 0x0548
    2618:	09 95       	icall
	}
}
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	ff 91       	pop	r31
    2620:	ef 91       	pop	r30
    2622:	bf 91       	pop	r27
    2624:	af 91       	pop	r26
    2626:	9f 91       	pop	r25
    2628:	8f 91       	pop	r24
    262a:	7f 91       	pop	r23
    262c:	6f 91       	pop	r22
    262e:	5f 91       	pop	r21
    2630:	4f 91       	pop	r20
    2632:	3f 91       	pop	r19
    2634:	2f 91       	pop	r18
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	0f 90       	pop	r0
    263c:	1f 90       	pop	r1
    263e:	18 95       	reti

00002640 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2640:	1f 92       	push	r1
    2642:	0f 92       	push	r0
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	0f 92       	push	r0
    2648:	11 24       	eor	r1, r1
    264a:	2f 93       	push	r18
    264c:	3f 93       	push	r19
    264e:	4f 93       	push	r20
    2650:	5f 93       	push	r21
    2652:	6f 93       	push	r22
    2654:	7f 93       	push	r23
    2656:	8f 93       	push	r24
    2658:	9f 93       	push	r25
    265a:	af 93       	push	r26
    265c:	bf 93       	push	r27
    265e:	ef 93       	push	r30
    2660:	ff 93       	push	r31
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC_CALLBACK != NULL)
    266a:	80 91 49 05 	lds	r24, 0x0549
    266e:	90 91 4a 05 	lds	r25, 0x054A
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	29 f0       	breq	.+10     	; 0x2680 <__vector_10+0x40>
	{
		TIMER0_CTC_CALLBACK();
    2676:	e0 91 49 05 	lds	r30, 0x0549
    267a:	f0 91 4a 05 	lds	r31, 0x054A
    267e:	09 95       	icall
	}
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	ff 91       	pop	r31
    2686:	ef 91       	pop	r30
    2688:	bf 91       	pop	r27
    268a:	af 91       	pop	r26
    268c:	9f 91       	pop	r25
    268e:	8f 91       	pop	r24
    2690:	7f 91       	pop	r23
    2692:	6f 91       	pop	r22
    2694:	5f 91       	pop	r21
    2696:	4f 91       	pop	r20
    2698:	3f 91       	pop	r19
    269a:	2f 91       	pop	r18
    269c:	0f 90       	pop	r0
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	0f 90       	pop	r0
    26a2:	1f 90       	pop	r1
    26a4:	18 95       	reti

000026a6 <MTIMER1_voidInit>:

void MTIMER1_voidInit()
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	// Select TIMER 1 MODE ==> 14
	CLR_BIT(TCCR1A,0);
    26ae:	af e4       	ldi	r26, 0x4F	; 79
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	ef e4       	ldi	r30, 0x4F	; 79
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8e 7f       	andi	r24, 0xFE	; 254
    26ba:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    26bc:	af e4       	ldi	r26, 0x4F	; 79
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	ef e4       	ldi	r30, 0x4F	; 79
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	82 60       	ori	r24, 0x02	; 2
    26c8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    26ca:	ae e4       	ldi	r26, 0x4E	; 78
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	ee e4       	ldi	r30, 0x4E	; 78
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	88 60       	ori	r24, 0x08	; 8
    26d6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    26d8:	ae e4       	ldi	r26, 0x4E	; 78
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ee e4       	ldi	r30, 0x4E	; 78
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	80 61       	ori	r24, 0x10	; 16
    26e4:	8c 93       	st	X, r24

	// Non-Inverting Mode for OC1A
	CLR_BIT(TCCR1A,6);
    26e6:	af e4       	ldi	r26, 0x4F	; 79
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ef e4       	ldi	r30, 0x4F	; 79
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 7b       	andi	r24, 0xBF	; 191
    26f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
    26f4:	af e4       	ldi	r26, 0x4F	; 79
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	ef e4       	ldi	r30, 0x4F	; 79
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	80 68       	ori	r24, 0x80	; 128
    2700:	8c 93       	st	X, r24

	// ICR1 = 19999
	ICR1 = 19999;
    2702:	e6 e4       	ldi	r30, 0x46	; 70
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	8f e1       	ldi	r24, 0x1F	; 31
    2708:	9e e4       	ldi	r25, 0x4E	; 78
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24

	//OCR1A
	OCR1A = 1500;
    270e:	ea e4       	ldi	r30, 0x4A	; 74
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	8c ed       	ldi	r24, 0xDC	; 220
    2714:	95 e0       	ldi	r25, 0x05	; 5
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24

	// Start Timer
	CLR_BIT(TCCR1B,2);
    271a:	ae e4       	ldi	r26, 0x4E	; 78
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	ee e4       	ldi	r30, 0x4E	; 78
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8b 7f       	andi	r24, 0xFB	; 251
    2726:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    2728:	ae e4       	ldi	r26, 0x4E	; 78
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	ee e4       	ldi	r30, 0x4E	; 78
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	82 60       	ori	r24, 0x02	; 2
    2734:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    2736:	ae e4       	ldi	r26, 0x4E	; 78
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	ee e4       	ldi	r30, 0x4E	; 78
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8e 7f       	andi	r24, 0xFE	; 254
    2742:	8c 93       	st	X, r24
}
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <MTIMER1_voidSetOCR1AValue>:

void MTIMER1_voidSetOCR1AValue (u16 A_u16Value)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <MTIMER1_voidSetOCR1AValue+0x6>
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16Value;
    2758:	ea e4       	ldi	r30, 0x4A	; 74
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <MTIMER1_voidInitSWICU>:

void MTIMER1_voidInitSWICU()
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
	// Start Timer by setting its clock pre-scaler
	CLR_BIT(TCCR1B,0);
    2776:	ae e4       	ldi	r26, 0x4E	; 78
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ee e4       	ldi	r30, 0x4E	; 78
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	8e 7f       	andi	r24, 0xFE	; 254
    2782:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    2784:	ae e4       	ldi	r26, 0x4E	; 78
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ee e4       	ldi	r30, 0x4E	; 78
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	82 60       	ori	r24, 0x02	; 2
    2790:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    2792:	ae e4       	ldi	r26, 0x4E	; 78
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ee e4       	ldi	r30, 0x4E	; 78
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	8b 7f       	andi	r24, 0xFB	; 251
    279e:	8c 93       	st	X, r24
}
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <MTIMER1_voidSetTimerValue>:
void MTIMER1_voidSetTimerValue (u16 A_u16Value)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <MTIMER1_voidSetTimerValue+0x6>
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=A_u16Value;
    27b4:	ec e4       	ldi	r30, 0x4C	; 76
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	9a 81       	ldd	r25, Y+2	; 0x02
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	80 83       	st	Z, r24
}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <MTIMER1_u16ReadTimerValue>:

u16 MTIMER1_u16ReadTimerValue(void)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    27d2:	ec e4       	ldi	r30, 0x4C	; 76
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
}
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <TWI_voidInitMaster>:
#include "../include/MCAL/TWI/TWI_private.h"
#include "../include/MCAL/TWI/TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	0f 92       	push	r0
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    27ec:	a6 e5       	ldi	r26, 0x56	; 86
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e6 e5       	ldi	r30, 0x56	; 86
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 64       	ori	r24, 0x40	; 64
    27f8:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
    27fa:	e0 e2       	ldi	r30, 0x20	; 32
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	82 e0       	ldi	r24, 0x02	; 2
    2800:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    2802:	a1 e2       	ldi	r26, 0x21	; 33
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e1 e2       	ldi	r30, 0x21	; 33
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	8e 7f       	andi	r24, 0xFE	; 254
    280e:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    2810:	a1 e2       	ldi	r26, 0x21	; 33
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e1 e2       	ldi	r30, 0x21	; 33
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8d 7f       	andi	r24, 0xFD	; 253
    281c:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	88 23       	and	r24, r24
    2822:	29 f0       	breq	.+10     	; 0x282e <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/ //bits from 1 to 7
		TWAR = (Copy_u8Address << 1);
    2824:	e2 e2       	ldi	r30, 0x22	; 34
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	88 0f       	add	r24, r24
    282c:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    282e:	a6 e5       	ldi	r26, 0x56	; 86
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e6 e5       	ldi	r30, 0x56	; 86
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	84 60       	ori	r24, 0x04	; 4
    283a:	8c 93       	st	X, r24
}
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	0f 92       	push	r0
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
    2850:	e2 e2       	ldi	r30, 0x22	; 34
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	88 0f       	add	r24, r24
    2858:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    285a:	a6 e5       	ldi	r26, 0x56	; 86
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e6 e5       	ldi	r30, 0x56	; 86
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	80 64       	ori	r24, 0x40	; 64
    2866:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    2868:	a6 e5       	ldi	r26, 0x56	; 86
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e6 e5       	ldi	r30, 0x56	; 86
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	84 60       	ori	r24, 0x04	; 4
    2874:	8c 93       	st	X, r24
}
    2876:	0f 90       	pop	r0
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	0f 92       	push	r0
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    2888:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
    288a:	a6 e5       	ldi	r26, 0x56	; 86
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e6 e5       	ldi	r30, 0x56	; 86
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 62       	ori	r24, 0x20	; 32
    2896:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    2898:	a6 e5       	ldi	r26, 0x56	; 86
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e6 e5       	ldi	r30, 0x56	; 86
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	80 68       	ori	r24, 0x80	; 128
    28a4:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    28a6:	e6 e5       	ldi	r30, 0x56	; 86
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	88 23       	and	r24, r24
    28ae:	dc f7       	brge	.-10     	; 0x28a6 <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
    28b0:	e1 e2       	ldi	r30, 0x21	; 33
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	88 7f       	andi	r24, 0xF8	; 248
    28bc:	90 70       	andi	r25, 0x00	; 0
    28be:	88 30       	cpi	r24, 0x08	; 8
    28c0:	91 05       	cpc	r25, r1
    28c2:	11 f0       	breq	.+4      	; 0x28c8 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	0f 92       	push	r0
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    28dc:	19 82       	std	Y+1, r1	; 0x01
	// clear INT flag
	// Send Repeated Start Condition
	// Enable TWI
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    28de:	a6 e5       	ldi	r26, 0x56	; 86
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e6 e5       	ldi	r30, 0x56	; 86
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	84 6a       	ori	r24, 0xA4	; 164
    28ea:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    28ec:	e6 e5       	ldi	r30, 0x56	; 86
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	88 23       	and	r24, r24
    28f4:	dc f7       	brge	.-10     	; 0x28ec <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
    28f6:	e1 e2       	ldi	r30, 0x21	; 33
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	88 7f       	andi	r24, 0xF8	; 248
    2902:	90 70       	andi	r25, 0x00	; 0
    2904:	80 31       	cpi	r24, 0x10	; 16
    2906:	91 05       	cpc	r25, r1
    2908:	11 f0       	breq	.+4      	; 0x290e <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    290e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2910:	0f 90       	pop	r0
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	00 d0       	rcall	.+0      	; 0x291e <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8b 83       	std	Y+3, r24	; 0x03
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    2926:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TWCRValue = 0;
    2928:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    292a:	e3 e2       	ldi	r30, 0x23	; 35
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	88 0f       	add	r24, r24
    2932:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	CLR_BIT(TWDR, TWDR_TWD0);
    2934:	a3 e2       	ldi	r26, 0x23	; 35
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e3 e2       	ldi	r30, 0x23	; 35
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8e 7f       	andi	r24, 0xFE	; 254
    2940:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    2942:	a6 e5       	ldi	r26, 0x56	; 86
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e6 e5       	ldi	r30, 0x56	; 86
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8f 7d       	andi	r24, 0xDF	; 223
    294e:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    2950:	a6 e5       	ldi	r26, 0x56	; 86
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e6 e5       	ldi	r30, 0x56	; 86
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	80 68       	ori	r24, 0x80	; 128
    295c:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    295e:	e6 e5       	ldi	r30, 0x56	; 86
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	88 23       	and	r24, r24
    2966:	dc f7       	brge	.-10     	; 0x295e <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x46>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    2968:	e1 e2       	ldi	r30, 0x21	; 33
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	88 7f       	andi	r24, 0xF8	; 248
    2974:	90 70       	andi	r25, 0x00	; 0
    2976:	88 31       	cpi	r24, 0x18	; 24
    2978:	91 05       	cpc	r25, r1
    297a:	11 f0       	breq	.+4      	; 0x2980 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x68>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorStatus;
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	00 d0       	rcall	.+0      	; 0x2994 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    299a:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    299c:	e3 e2       	ldi	r30, 0x23	; 35
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	88 0f       	add	r24, r24
    29a4:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	SET_BIT(TWDR, TWDR_TWD0);
    29a6:	a3 e2       	ldi	r26, 0x23	; 35
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e3 e2       	ldi	r30, 0x23	; 35
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	81 60       	ori	r24, 0x01	; 1
    29b2:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    29b4:	a6 e5       	ldi	r26, 0x56	; 86
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e6 e5       	ldi	r30, 0x56	; 86
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8f 7d       	andi	r24, 0xDF	; 223
    29c0:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    29c2:	a6 e5       	ldi	r26, 0x56	; 86
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e6 e5       	ldi	r30, 0x56	; 86
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 68       	ori	r24, 0x80	; 128
    29ce:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    29d0:	e6 e5       	ldi	r30, 0x56	; 86
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	dc f7       	brge	.-10     	; 0x29d0 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    29da:	e1 e2       	ldi	r30, 0x21	; 33
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	88 7f       	andi	r24, 0xF8	; 248
    29e6:	90 70       	andi	r25, 0x00	; 0
    29e8:	80 34       	cpi	r24, 0x40	; 64
    29ea:	91 05       	cpc	r25, r1
    29ec:	11 f0       	breq	.+4      	; 0x29f2 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    29ee:	84 e0       	ldi	r24, 0x04	; 4
    29f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    2a0a:	19 82       	std	Y+1, r1	; 0x01


	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
    2a0c:	e3 e2       	ldi	r30, 0x23	; 35
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    2a14:	a6 e5       	ldi	r26, 0x56	; 86
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e6 e5       	ldi	r30, 0x56	; 86
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	80 68       	ori	r24, 0x80	; 128
    2a20:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    2a22:	e6 e5       	ldi	r30, 0x56	; 86
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	88 23       	and	r24, r24
    2a2a:	dc f7       	brge	.-10     	; 0x2a22 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    2a2c:	e1 e2       	ldi	r30, 0x21	; 33
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	88 7f       	andi	r24, 0xF8	; 248
    2a38:	90 70       	andi	r25, 0x00	; 0
    2a3a:	88 32       	cpi	r24, 0x28	; 40
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	11 f0       	breq	.+4      	; 0x2a44 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
    2a40:	85 e0       	ldi	r24, 0x05	; 5
    2a42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    2a56:	0f 92       	push	r0
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	9b 83       	std	Y+3, r25	; 0x03
    2a5e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    2a60:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    2a62:	a6 e5       	ldi	r26, 0x56	; 86
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e6 e5       	ldi	r30, 0x56	; 86
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	80 68       	ori	r24, 0x80	; 128
    2a6e:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    2a70:	e6 e5       	ldi	r30, 0x56	; 86
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	88 23       	and	r24, r24
    2a78:	dc f7       	brge	.-10     	; 0x2a70 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    2a7a:	e1 e2       	ldi	r30, 0x21	; 33
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	88 7f       	andi	r24, 0xF8	; 248
    2a86:	90 70       	andi	r25, 0x00	; 0
    2a88:	80 35       	cpi	r24, 0x50	; 80
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	19 f0       	breq	.+6      	; 0x2a94 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    2a8e:	86 e0       	ldi	r24, 0x06	; 6
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	06 c0       	rjmp	.+12     	; 0x2aa0 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    2a94:	e3 e2       	ldi	r30, 0x23	; 35
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a9e:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01

}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    2ab6:	a6 e5       	ldi	r26, 0x56	; 86
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e6 e5       	ldi	r30, 0x56	; 86
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	80 61       	ori	r24, 0x10	; 16
    2ac2:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    2ac4:	a6 e5       	ldi	r26, 0x56	; 86
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e6 e5       	ldi	r30, 0x56	; 86
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	80 68       	ori	r24, 0x80	; 128
    2ad0:	8c 93       	st	X, r24
}
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <MUART_voidInit>:
#define RXC_BIT 7

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <MUART_voidInit+0x6>
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    2ae2:	83 e3       	ldi	r24, 0x33	; 51
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	89 83       	std	Y+1, r24	; 0x01

	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    2aea:	e9 e2       	ldi	r30, 0x29	; 41
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	80 83       	st	Z, r24
	UBRRH = (u8) (local_u16BaudRate >> 8);
    2af2:	e0 e4       	ldi	r30, 0x40	; 64
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	89 2f       	mov	r24, r25
    2afc:	99 27       	eor	r25, r25
    2afe:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    2b00:	aa e2       	ldi	r26, 0x2A	; 42
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ea e2       	ldi	r30, 0x2A	; 42
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	8b 7f       	andi	r24, 0xFB	; 251
    2b0c:	8c 93       	st	X, r24

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    2b0e:	e0 e4       	ldi	r30, 0x40	; 64
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	86 e8       	ldi	r24, 0x86	; 134
    2b14:	80 83       	st	Z, r24

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    2b16:	aa e2       	ldi	r26, 0x2A	; 42
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	ea e2       	ldi	r30, 0x2A	; 42
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	88 60       	ori	r24, 0x08	; 8
    2b22:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    2b24:	aa e2       	ldi	r26, 0x2A	; 42
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	ea e2       	ldi	r30, 0x2A	; 42
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	80 61       	ori	r24, 0x10	; 16
    2b30:	8c 93       	st	X, r24

}
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <UART_vClearBuffer>:

void UART_vClearBuffer()
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	0f 92       	push	r0
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    u8 temp;
    temp = UDR;
    2b46:	ec e2       	ldi	r30, 0x2C	; 44
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(UCSRA, RXC_BIT);
    2b4e:	ab e2       	ldi	r26, 0x2B	; 43
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	eb e2       	ldi	r30, 0x2B	; 43
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	8f 77       	andi	r24, 0x7F	; 127
    2b5a:	8c 93       	st	X, r24
}
    2b5c:	0f 90       	pop	r0
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <MUART_voidSendByteSyncBlocking>:

void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	0f 92       	push	r0
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);
    2b70:	eb e2       	ldi	r30, 0x2B	; 43
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	82 95       	swap	r24
    2b78:	86 95       	lsr	r24
    2b7a:	87 70       	andi	r24, 0x07	; 7
    2b7c:	88 2f       	mov	r24, r24
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	81 70       	andi	r24, 0x01	; 1
    2b82:	90 70       	andi	r25, 0x00	; 0
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	a1 f3       	breq	.-24     	; 0x2b70 <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    2b88:	ec e2       	ldi	r30, 0x2C	; 44
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	80 83       	st	Z, r24

	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);
    2b90:	eb e2       	ldi	r30, 0x2B	; 43
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	82 95       	swap	r24
    2b98:	86 95       	lsr	r24
    2b9a:	87 70       	andi	r24, 0x07	; 7
    2b9c:	88 2f       	mov	r24, r24
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	81 70       	andi	r24, 0x01	; 1
    2ba2:	90 70       	andi	r25, 0x00	; 0
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	a1 f3       	breq	.-24     	; 0x2b90 <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    2ba8:	ab e2       	ldi	r26, 0x2B	; 43
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	eb e2       	ldi	r30, 0x2B	; 43
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	80 64       	ori	r24, 0x40	; 64
    2bb4:	8c 93       	st	X, r24

}
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <MUART_voidSendByteSyncNonBlocking+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <MUART_voidSendByteSyncNonBlocking+0x8>
    2bc6:	0f 92       	push	r0
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    2bce:	19 82       	std	Y+1, r1	; 0x01
    2bd0:	1a 82       	std	Y+2, r1	; 0x02
    2bd2:	1b 82       	std	Y+3, r1	; 0x03
    2bd4:	1c 82       	std	Y+4, r1	; 0x04
    2bd6:	17 c0       	rjmp	.+46     	; 0x2c06 <MUART_voidSendByteSyncNonBlocking+0x48>
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0)
	{
		local_u32Timeout++;
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	ab 81       	ldd	r26, Y+3	; 0x03
    2bde:	bc 81       	ldd	r27, Y+4	; 0x04
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	a1 1d       	adc	r26, r1
    2be4:	b1 1d       	adc	r27, r1
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	ab 83       	std	Y+3, r26	; 0x03
    2bec:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf2:	ab 81       	ldd	r26, Y+3	; 0x03
    2bf4:	bc 81       	ldd	r27, Y+4	; 0x04
    2bf6:	88 38       	cpi	r24, 0x88	; 136
    2bf8:	23 e1       	ldi	r18, 0x13	; 19
    2bfa:	92 07       	cpc	r25, r18
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	a2 07       	cpc	r26, r18
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	b2 07       	cpc	r27, r18
    2c04:	61 f0       	breq	.+24     	; 0x2c1e <MUART_voidSendByteSyncNonBlocking+0x60>

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 local_u32Timeout=0;
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0)
    2c06:	eb e2       	ldi	r30, 0x2B	; 43
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	82 95       	swap	r24
    2c0e:	86 95       	lsr	r24
    2c10:	87 70       	andi	r24, 0x07	; 7
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	81 70       	andi	r24, 0x01	; 1
    2c18:	90 70       	andi	r25, 0x00	; 0
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	e9 f2       	breq	.-70     	; 0x2bd8 <MUART_voidSendByteSyncNonBlocking+0x1a>
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	ab 81       	ldd	r26, Y+3	; 0x03
    2c24:	bc 81       	ldd	r27, Y+4	; 0x04
    2c26:	88 38       	cpi	r24, 0x88	; 136
    2c28:	23 e1       	ldi	r18, 0x13	; 19
    2c2a:	92 07       	cpc	r25, r18
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	a2 07       	cpc	r26, r18
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	b2 07       	cpc	r27, r18
    2c34:	99 f1       	breq	.+102    	; 0x2c9c <MUART_voidSendByteSyncNonBlocking+0xde>
	{
		local_u32Timeout = 0;
    2c36:	19 82       	std	Y+1, r1	; 0x01
    2c38:	1a 82       	std	Y+2, r1	; 0x02
    2c3a:	1b 82       	std	Y+3, r1	; 0x03
    2c3c:	1c 82       	std	Y+4, r1	; 0x04
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
    2c3e:	ec e2       	ldi	r30, 0x2C	; 44
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	80 83       	st	Z, r24
    2c46:	17 c0       	rjmp	.+46     	; 0x2c76 <MUART_voidSendByteSyncNonBlocking+0xb8>

		// wait until UDR is empty
		while(GET_BIT(UCSRA,5)==0)
		{
			local_u32Timeout++;
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c4e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	a1 1d       	adc	r26, r1
    2c54:	b1 1d       	adc	r27, r1
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	ab 83       	std	Y+3, r26	; 0x03
    2c5c:	bc 83       	std	Y+4, r27	; 0x04
			if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	ab 81       	ldd	r26, Y+3	; 0x03
    2c64:	bc 81       	ldd	r27, Y+4	; 0x04
    2c66:	88 38       	cpi	r24, 0x88	; 136
    2c68:	23 e1       	ldi	r18, 0x13	; 19
    2c6a:	92 07       	cpc	r25, r18
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	a2 07       	cpc	r26, r18
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	b2 07       	cpc	r27, r18
    2c74:	61 f0       	breq	.+24     	; 0x2c8e <MUART_voidSendByteSyncNonBlocking+0xd0>
		local_u32Timeout = 0;
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;

		// wait until UDR is empty
		while(GET_BIT(UCSRA,5)==0)
    2c76:	eb e2       	ldi	r30, 0x2B	; 43
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	82 95       	swap	r24
    2c7e:	86 95       	lsr	r24
    2c80:	87 70       	andi	r24, 0x07	; 7
    2c82:	88 2f       	mov	r24, r24
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	81 70       	andi	r24, 0x01	; 1
    2c88:	90 70       	andi	r25, 0x00	; 0
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	e9 f2       	breq	.-70     	; 0x2c48 <MUART_voidSendByteSyncNonBlocking+0x8a>
			{
				break;
			}
		}
		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    2c8e:	ab e2       	ldi	r26, 0x2B	; 43
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	eb e2       	ldi	r30, 0x2B	; 43
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	80 64       	ori	r24, 0x40	; 64
    2c9a:	8c 93       	st	X, r24
	}
}
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <MUART_voidSendStringSyncNonBlocking>:



void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <MUART_voidSendStringSyncNonBlocking+0x6>
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	9a 83       	std	Y+2, r25	; 0x02
    2cb8:	89 83       	std	Y+1, r24	; 0x01
    2cba:	0b c0       	rjmp	.+22     	; 0x2cd2 <MUART_voidSendStringSyncNonBlocking+0x26>
	while (*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    2cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc0:	20 81       	ld	r18, Z
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	82 2f       	mov	r24, r18
    2cce:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <MUART_voidSendByteSyncNonBlocking>



void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while (*A_pu8String > 0)
    2cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 23       	and	r24, r24
    2cda:	81 f7       	brne	.-32     	; 0x2cbc <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <MUART_voidSendByteAsync>:


void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA,5)==0)
    2cf2:	eb e2       	ldi	r30, 0x2B	; 43
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	82 95       	swap	r24
    2cfa:	86 95       	lsr	r24
    2cfc:	87 70       	andi	r24, 0x07	; 7
    2cfe:	88 2f       	mov	r24, r24
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	81 70       	andi	r24, 0x01	; 1
    2d04:	90 70       	andi	r25, 0x00	; 0
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	21 f4       	brne	.+8      	; 0x2d12 <MUART_voidSendByteAsync+0x2c>
	{
		UDR = A_u8DataByte;
    2d0a:	ec e2       	ldi	r30, 0x2C	; 44
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	80 83       	st	Z, r24
	}
}
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <MUART_u8ReadByteSyncBlocking>:


u8 MUART_u8ReadByteSyncBlocking (void)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0);
    2d22:	eb e2       	ldi	r30, 0x2B	; 43
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	88 23       	and	r24, r24
    2d2a:	dc f7       	brge	.-10     	; 0x2d22 <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    2d2c:	ec e2       	ldi	r30, 0x2C	; 44
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
}
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync (void)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    2d40:	ec e2       	ldi	r30, 0x2C	; 44
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
}
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <MUART_u8ReadByteSyncNonBlocking+0x6>
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <MUART_u8ReadByteSyncNonBlocking+0x8>
    2d54:	0f 92       	push	r0
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    2d5a:	8f ef       	ldi	r24, 0xFF	; 255
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    2d5e:	19 82       	std	Y+1, r1	; 0x01
    2d60:	1a 82       	std	Y+2, r1	; 0x02
    2d62:	1b 82       	std	Y+3, r1	; 0x03
    2d64:	1c 82       	std	Y+4, r1	; 0x04
    2d66:	17 c0       	rjmp	.+46     	; 0x2d96 <MUART_u8ReadByteSyncNonBlocking+0x4a>
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0)
	{
		local_u32Timeout++;
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d6e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	a1 1d       	adc	r26, r1
    2d74:	b1 1d       	adc	r27, r1
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	9a 83       	std	Y+2, r25	; 0x02
    2d7a:	ab 83       	std	Y+3, r26	; 0x03
    2d7c:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	ab 81       	ldd	r26, Y+3	; 0x03
    2d84:	bc 81       	ldd	r27, Y+4	; 0x04
    2d86:	88 38       	cpi	r24, 0x88	; 136
    2d88:	23 e1       	ldi	r18, 0x13	; 19
    2d8a:	92 07       	cpc	r25, r18
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	a2 07       	cpc	r26, r18
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	b2 07       	cpc	r27, r18
    2d94:	29 f0       	breq	.+10     	; 0x2da0 <MUART_u8ReadByteSyncNonBlocking+0x54>
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
	u32 local_u32Timeout=0;
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0)
    2d96:	eb e2       	ldi	r30, 0x2B	; 43
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 23       	and	r24, r24
    2d9e:	24 f7       	brge	.-56     	; 0x2d68 <MUART_u8ReadByteSyncNonBlocking+0x1c>
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	ab 81       	ldd	r26, Y+3	; 0x03
    2da6:	bc 81       	ldd	r27, Y+4	; 0x04
    2da8:	88 38       	cpi	r24, 0x88	; 136
    2daa:	23 e1       	ldi	r18, 0x13	; 19
    2dac:	92 07       	cpc	r25, r18
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	a2 07       	cpc	r26, r18
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	b2 07       	cpc	r27, r18
    2db6:	21 f0       	breq	.+8      	; 0x2dc0 <MUART_u8ReadByteSyncNonBlocking+0x74>
	{
		local_u8ReceivedData = UDR;
    2db8:	ec e2       	ldi	r30, 0x2C	; 44
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8ReceivedData;
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <MUART_voidSetCallBack>:
	}
	return Str;
}
*/
void MUART_voidSetCallBack (UART_INTERRUPTS_e A_InterruptSource , void (*A_PtoFunc)(void))
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <MUART_voidSetCallBack+0x6>
    2dd8:	0f 92       	push	r0
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	7b 83       	std	Y+3, r23	; 0x03
    2de2:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_InterruptSource<=UART_TX_INTERRUPT)&&(A_PtoFunc != NULL))
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	83 30       	cpi	r24, 0x03	; 3
    2de8:	80 f4       	brcc	.+32     	; 0x2e0a <MUART_voidSetCallBack+0x38>
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	61 f0       	breq	.+24     	; 0x2e0a <MUART_voidSetCallBack+0x38>
	{
		FuncPtr [A_InterruptSource] = A_PtoFunc;
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	e5 5b       	subi	r30, 0xB5	; 181
    2e00:	fa 4f       	sbci	r31, 0xFA	; 250
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	80 83       	st	Z, r24
	}
}
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    2e16:	1f 92       	push	r1
    2e18:	0f 92       	push	r0
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	0f 92       	push	r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	2f 93       	push	r18
    2e22:	3f 93       	push	r19
    2e24:	4f 93       	push	r20
    2e26:	5f 93       	push	r21
    2e28:	6f 93       	push	r22
    2e2a:	7f 93       	push	r23
    2e2c:	8f 93       	push	r24
    2e2e:	9f 93       	push	r25
    2e30:	af 93       	push	r26
    2e32:	bf 93       	push	r27
    2e34:	ef 93       	push	r30
    2e36:	ff 93       	push	r31
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_RX_INTERRUPT] != NULL)
    2e40:	80 91 4b 05 	lds	r24, 0x054B
    2e44:	90 91 4c 05 	lds	r25, 0x054C
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	29 f0       	breq	.+10     	; 0x2e56 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    2e4c:	e0 91 4b 05 	lds	r30, 0x054B
    2e50:	f0 91 4c 05 	lds	r31, 0x054C
    2e54:	09 95       	icall
	}
}
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	ff 91       	pop	r31
    2e5c:	ef 91       	pop	r30
    2e5e:	bf 91       	pop	r27
    2e60:	af 91       	pop	r26
    2e62:	9f 91       	pop	r25
    2e64:	8f 91       	pop	r24
    2e66:	7f 91       	pop	r23
    2e68:	6f 91       	pop	r22
    2e6a:	5f 91       	pop	r21
    2e6c:	4f 91       	pop	r20
    2e6e:	3f 91       	pop	r19
    2e70:	2f 91       	pop	r18
    2e72:	0f 90       	pop	r0
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	0f 90       	pop	r0
    2e78:	1f 90       	pop	r1
    2e7a:	18 95       	reti

00002e7c <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    2e7c:	1f 92       	push	r1
    2e7e:	0f 92       	push	r0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	0f 92       	push	r0
    2e84:	11 24       	eor	r1, r1
    2e86:	2f 93       	push	r18
    2e88:	3f 93       	push	r19
    2e8a:	4f 93       	push	r20
    2e8c:	5f 93       	push	r21
    2e8e:	6f 93       	push	r22
    2e90:	7f 93       	push	r23
    2e92:	8f 93       	push	r24
    2e94:	9f 93       	push	r25
    2e96:	af 93       	push	r26
    2e98:	bf 93       	push	r27
    2e9a:	ef 93       	push	r30
    2e9c:	ff 93       	push	r31
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    2ea6:	80 91 4d 05 	lds	r24, 0x054D
    2eaa:	90 91 4e 05 	lds	r25, 0x054E
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	29 f0       	breq	.+10     	; 0x2ebc <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    2eb2:	e0 91 4d 05 	lds	r30, 0x054D
    2eb6:	f0 91 4e 05 	lds	r31, 0x054E
    2eba:	09 95       	icall
	}
}
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	ff 91       	pop	r31
    2ec2:	ef 91       	pop	r30
    2ec4:	bf 91       	pop	r27
    2ec6:	af 91       	pop	r26
    2ec8:	9f 91       	pop	r25
    2eca:	8f 91       	pop	r24
    2ecc:	7f 91       	pop	r23
    2ece:	6f 91       	pop	r22
    2ed0:	5f 91       	pop	r21
    2ed2:	4f 91       	pop	r20
    2ed4:	3f 91       	pop	r19
    2ed6:	2f 91       	pop	r18
    2ed8:	0f 90       	pop	r0
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	0f 90       	pop	r0
    2ede:	1f 90       	pop	r1
    2ee0:	18 95       	reti

00002ee2 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    2ee2:	1f 92       	push	r1
    2ee4:	0f 92       	push	r0
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	0f 92       	push	r0
    2eea:	11 24       	eor	r1, r1
    2eec:	2f 93       	push	r18
    2eee:	3f 93       	push	r19
    2ef0:	4f 93       	push	r20
    2ef2:	5f 93       	push	r21
    2ef4:	6f 93       	push	r22
    2ef6:	7f 93       	push	r23
    2ef8:	8f 93       	push	r24
    2efa:	9f 93       	push	r25
    2efc:	af 93       	push	r26
    2efe:	bf 93       	push	r27
    2f00:	ef 93       	push	r30
    2f02:	ff 93       	push	r31
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_TX_INTERRUPT] != NULL)
    2f0c:	80 91 4f 05 	lds	r24, 0x054F
    2f10:	90 91 50 05 	lds	r25, 0x0550
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	29 f0       	breq	.+10     	; 0x2f22 <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    2f18:	e0 91 4f 05 	lds	r30, 0x054F
    2f1c:	f0 91 50 05 	lds	r31, 0x0550
    2f20:	09 95       	icall
	}
}
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	ff 91       	pop	r31
    2f28:	ef 91       	pop	r30
    2f2a:	bf 91       	pop	r27
    2f2c:	af 91       	pop	r26
    2f2e:	9f 91       	pop	r25
    2f30:	8f 91       	pop	r24
    2f32:	7f 91       	pop	r23
    2f34:	6f 91       	pop	r22
    2f36:	5f 91       	pop	r21
    2f38:	4f 91       	pop	r20
    2f3a:	3f 91       	pop	r19
    2f3c:	2f 91       	pop	r18
    2f3e:	0f 90       	pop	r0
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	0f 90       	pop	r0
    2f44:	1f 90       	pop	r1
    2f46:	18 95       	reti

00002f48 <__prologue_saves__>:
    2f48:	2f 92       	push	r2
    2f4a:	3f 92       	push	r3
    2f4c:	4f 92       	push	r4
    2f4e:	5f 92       	push	r5
    2f50:	6f 92       	push	r6
    2f52:	7f 92       	push	r7
    2f54:	8f 92       	push	r8
    2f56:	9f 92       	push	r9
    2f58:	af 92       	push	r10
    2f5a:	bf 92       	push	r11
    2f5c:	cf 92       	push	r12
    2f5e:	df 92       	push	r13
    2f60:	ef 92       	push	r14
    2f62:	ff 92       	push	r15
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	ca 1b       	sub	r28, r26
    2f72:	db 0b       	sbc	r29, r27
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	09 94       	ijmp

00002f80 <__epilogue_restores__>:
    2f80:	2a 88       	ldd	r2, Y+18	; 0x12
    2f82:	39 88       	ldd	r3, Y+17	; 0x11
    2f84:	48 88       	ldd	r4, Y+16	; 0x10
    2f86:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f88:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f90:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f92:	b9 84       	ldd	r11, Y+9	; 0x09
    2f94:	c8 84       	ldd	r12, Y+8	; 0x08
    2f96:	df 80       	ldd	r13, Y+7	; 0x07
    2f98:	ee 80       	ldd	r14, Y+6	; 0x06
    2f9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f9c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f9e:	1b 81       	ldd	r17, Y+3	; 0x03
    2fa0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fa2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fa4:	ce 0f       	add	r28, r30
    2fa6:	d1 1d       	adc	r29, r1
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	ed 01       	movw	r28, r26
    2fb4:	08 95       	ret

00002fb6 <strcmp>:
    2fb6:	fb 01       	movw	r30, r22
    2fb8:	dc 01       	movw	r26, r24
    2fba:	8d 91       	ld	r24, X+
    2fbc:	01 90       	ld	r0, Z+
    2fbe:	80 19       	sub	r24, r0
    2fc0:	01 10       	cpse	r0, r1
    2fc2:	d9 f3       	breq	.-10     	; 0x2fba <strcmp+0x4>
    2fc4:	99 0b       	sbc	r25, r25
    2fc6:	08 95       	ret

00002fc8 <_exit>:
    2fc8:	f8 94       	cli

00002fca <__stop_program>:
    2fca:	ff cf       	rjmp	.-2      	; 0x2fca <__stop_program>
